{% extends 'ChatBundle:Default:mainAdmin.html.twig' %}
{% block title %}{{'global.chat'|trans}} - {{'admin.administrator'|trans}}{% endblock %}
{% block content %}

    {% if local is defined and local == true %}
        <div class="main-content chat-content">
            <div class="row">
                <!-- Raw Links -->
                <div class="col-md-6 pull-right">
                    <ul class="list-inline links-list ">
                        <li>
                            <a class="display-chat" href="#" data-toggle="chat" data-animate="1" data-collapse-sidebar="1">
                                <i class="entypo-chat"></i>
                                {{'global.chat'|trans}}
                                <span class="badge badge-success chat-notifications-badge is-hidden">0</span>
                            </a>
                        </li>
                    </ul>
                    <span id="container-notification"></span>
                </div>
            </div>
            <hr />
            <div class="col-lg-12" style="height: 500px; min-height: 500px;">    
            </div>
        </div>
    {% endif %}

    <div id="chat" class="fixed" data-current-user="{{nickname}}" data-order-by-status="1" data-max-chat-history="25">
        <div class="chat-inner">
            <h2 class="chat-header">
                {#<a href="#" class="chat-close" data-animate="1"><i class="entypo-cancel"></i></a>#}
                <div class="btn-group pull-right">
                    <button type="button" class="btn btn-default btn-xs dropdown-toggle" data-toggle="dropdown">
                        <span class="glyphicon glyphicon-chevron-down"></span>
                    </button>
                    <ul class="dropdown-menu slidedown">
                        <li>
                            <a href="javascript:window.location.reload();"><span class="glyphicon glyphicon-refresh"></span> {{'global.refresh'|trans}}</a>
                        </li>
                        <li>
                            <a href="javascript:void(0);" class="change-status" status="{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::STATUS_ONLINE')}}"><span class="glyphicon glyphicon-ok-sign"></span> {{'global.online'|trans}}</a>
                        </li>                        
                        <li>
                            <a href="javascript:void(0);" class="change-status" status="{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::STATUS_OFFLINE')}}"><span class="glyphicon glyphicon-off"></span> {{'global.offline'|trans}}</a>
                        </li>
                        <li class="divider"></li>
                        <li>
                            <a href="javascript:void(0);" class="display-settings"><span class="glyphicon glyphicon-cog"></span> {{'admin_settings.settings'|trans}}</a>
                        </li>
                        <li class="divider container-server-stop"></li>
                        <li class="container-server-stop">
                            <a href="javascript:void(0);" class="stop-gos-server"><span class="glyphicon glyphicon-stop"></span> {{'server.stop'|trans}}</a>
                        </li>
                    </ul>
                </div>
                
                <span class="main-status user-status {{userSettings.status}}"></span><i class="entypo-users"></i>{{nickname}}<span class="badge badge-success is-hidden">0</span>
            </h2>
                
            <div class="row chat-settings col-lg-12 hidden">
                <a><i class="entypo-cog"></i> {{'admin_settings.settings'|trans}}</a>
                <i class="entypo-cancel display-settings pull-right"></i><br>
                <div class="form-group margin-top">
                    <legend>{{'admin_settings.user_settings'|trans}}</legend>
                    <div class="col-xs-9 no-padding-left">
                        {{ form_label(userSettingsForm.notificationSound)}}
                        {{ form_widget(userSettingsForm.notificationSound,{'attr':{'class':'form-control'}})}}
                    </div>
                    <div class="col-xs-3 no-padding" style="padding-top: 24px;">
                        <a class="btn btn-sm play-sound no-padding"><i class="entypo-play"></i> {{'global.play'|trans}}</a>
                    </div>
                    <div class="col-xs-12 no-padding-left">
                        {{ form_label(userSettingsForm.theme)}}
                        {{ form_widget(userSettingsForm.theme,{'attr':{'class':'form-control'}})}}
                    </div>
                </div>
                <div class="form-group col-xs-12 flt-left margin-top no-padding">
                    <legend>{{'admin_settings.general_settings'|trans}}</legend>
                    {{ form_label(settingsForm.emailOfflineMessages)}}
                    {{ form_widget(settingsForm.emailOfflineMessages,{'attr':{'class':'form-control'}})}}
                </div>
                <div class="form-group col-xs-12 flt-left margin-top no-padding">
                    {{ form_label(settingsForm.automaticMessage)}}
                    {{ form_widget(settingsForm.automaticMessage,{'attr':{'class':'form-control'}})}}
                </div>
                <div class="form-group col-xs-12 flt-left margin-top no-padding">
                    {{ form_label(settingsForm.enableCustomResponses)}}
                    {{ form_widget(settingsForm.enableCustomResponses,{'attr':{'class':''}})}}
                </div>
                <div id="container-custom-messages" class="form-group col-xs-12 flt-left no-padding {% if not chatSettings.enableCustomResponses %} hidden {% endif %}">
                    {% include 'ChatBundle:ChatSettings:customMessages.html.twig' %}
                </div>
                <div class="form-group col-xs-12 flt-left no-padding">
                    <a class="btn btn-primary btn-sm no-padding add-custom-message {% if not chatSettings.enableCustomResponses %} hidden {% endif %}"><i class="entypo-plus"></i></a>
                </div>
                <div class="form-group col-xs-12 flt-left no-padding">
                    <button class="btn btn-primary pull-right save-settings">{{'global.save_changes'|trans}}</button>
                </div>
                <div class="hidden">
                    {% set sounds = { 0 : 'sounds-capisci.mp3',
                                      1 : 'sounds-come-to-daddy.mp3', 
                                      2 : 'sounds-communication-channel.mp3',
                                      3 : 'sounds-credulous.mp3', 
                                      4 : 'sounds-et-voila.mp3', 
                                      5 : 'sounds-gets-in-the-way.mp3', 
                                      6 : 'sounds-isnt-it.mp3',
                                      7 : 'sounds-no-way.mp3',
                                      8 : 'sounds-obey.mp3',
                                      9 : 'sounds-pedantic.mp3',
                                      10 : 'sounds-served.mp3',
                                      11 : 'sounds-surprise-on-a-spring.mp3',
                                      12 : 'sounds-worthwhile.mp3',
                                      13 : 'sounds-you-know.mp3',
                                      14 : 'sounds-your-turn.mp3',
                                        } %}
                    {% for sound in sounds %}
                        <audio controls id="{{sound}}">
                            <source src="{{asset('bundles/chat/sounds/'~sound)}}" type="audio/mpeg">
                        </audio>
                    {% endfor %}
                </div>
            </div>

            {% if local is defined and local == false %}
                <span class="col-xs-12" id="container-notification"></span>
            {% endif %}
            <div class="col-xs-12" id="container-server-start" style="display: none;">
                <p>{{'admin_settings.server_offline_message'|trans}}</p>
                <a class="btn btn-success btn-md start-gos-server">{{'admin_settings.start_server_message'|trans}}</a>
            </div>

            <div class="chat-group">
                <strong>{{'admin.last_conversations'|trans}}
                    <span class="alert-success btn-sm counter-indicator hidden" id='counter-last-conversations'>0</span>
                </strong>
            </div>
            <div class="chat-group" id="group-1">
                
                {% set listedConversations = [] %}
                {% for conversation in lastConversations %}
                    {% if conversation.type == constant('Kijho\\ChatBundle\\Entity\\Message::TYPE_CLIENT_TO_ADMIN') %}
                        {% if conversation.senderId not in listedConversations %}
                            {% set listedConversations = listedConversations|merge([conversation.senderId]) %}
                            <a href="#" class="open-client-conversation" client-id="{{conversation.senderId}}" online-with="" data-conversation-history="#client-{{conversation.senderId}}" messages-loaded="false" date="{{conversation.date|date('Y,m,d,H,i,s')}}">
                                <span class="user-status is-offline"></span> 
                                <i class="user-connection fa fa-user" title="{{'global.authenticated_user'|trans}}"></i>
                                <em>{{conversation.senderNickname}}</em> 
                                <span class="online-with hidden"></span>
                                <button class="hidden pull-right steal-chat" client-id="{{conversation.senderId}}" title="{{'admin.steal_conversation'|trans}}"><i class="entypo-eye"></i></button>
                                <span class="typing hidden"><i>{{'global.typing'|trans}}</i></span>
                                <span class="time-last-message hidden pull-right"></span>
                            </a>
                        {% endif %}
                    {% elseif conversation.type == constant('Kijho\\ChatBundle\\Entity\\Message::TYPE_ADMIN_TO_CLIENT') %}
                        {% if conversation.destinationId not in listedConversations %}
                            {% set listedConversations = listedConversations|merge([conversation.destinationId]) %}
                            <a href="#" class="open-client-conversation" client-id="{{conversation.destinationId}}" online-with="" data-conversation-history="#client-{{conversation.destinationId}}" messages-loaded="false" date="{{conversation.date|date('Y,m,d,H,i,s')}}">
                                <span class="user-status is-offline"></span> 
                                <i class="user-connection fa fa-user"></i>
                                <em>{{conversation.destinationNickname}}</em> 
                                <span class="online-with hidden"></span>
                                <button class="hidden pull-right steal-chat" client-id="{{conversation.destinationId}}" title="{{'admin.steal_conversation'|trans}}"><i class="entypo-eye"></i></button>
                                <span class="typing hidden"><i>{{'global.typing'|trans}}</i></span>
                                <span class="time-last-message hidden pull-right"></span>
                            </a>
                        {% endif %}
                    {% endif %}
                {% else %}
                    <a class="disabled" href="return false;">{{'admin.no_messages_today'|trans}}</a>
                {% endfor %}
            </div>
            
            
            <div class="chat-group">
                <strong>{{'admin.online_clients'|trans}} 
                    <span class="alert-success btn-sm counter-indicator hidden" id='counter-online-users'>0</span>
                    <button class="btn btn-default btn-xs display-online-clients pull-right" type="button">
                        <span class="glyphicon glyphicon-chevron-down"></span>
                    </button>
                    <button class="btn btn-default btn-xs hide-online-clients pull-right hidden" type="button">
                        <span class="glyphicon glyphicon-chevron-up"></span>
                    </button>
                </strong>
            </div>
            <div class="chat-group" id="group-2" style="display: none;">
                {#{% set listedConversations = [] %}
                {% for conversation in allConversations %}
                    {% if conversation.type == constant('Kijho\\ChatBundle\\Entity\\Message::TYPE_CLIENT_TO_ADMIN') %}
                        {% if conversation.senderId not in listedConversations %}
                            {% set listedConversations = listedConversations|merge([conversation.senderId]) %}
                            <a href="#" class="open-client-conversation" client-id="{{conversation.senderId}}" online-with="" data-conversation-history="#client-{{conversation.senderId}}" messages-loaded="false">
                                <span class="user-status is-offline"></span> 
                                <i class="user-connection fa fa-user" title="{{'global.authenticated_user'|trans}}"></i>
                                <em>{{conversation.senderNickname}}</em> 
                                <span class="online-with hidden"></span>
                                <button class="hidden pull-right steal-chat" client-id="{{conversation.senderId}}" title="{{'admin.steal_conversation'|trans}}"><i class="entypo-eye"></i></button>
                                <span class="typing hidden pull-right"><i>{{'global.typing'|trans}}</i></span>
                            </a>
                        {% endif %}
                    {% elseif conversation.type == constant('Kijho\\ChatBundle\\Entity\\Message::TYPE_ADMIN_TO_CLIENT') %}
                        {% if conversation.destinationId not in listedConversations %}
                            {% set listedConversations = listedConversations|merge([conversation.destinationId]) %}
                            <a href="#" class="open-client-conversation" client-id="{{conversation.destinationId}}" online-with="" data-conversation-history="#client-{{conversation.destinationId}}" messages-loaded="false">
                                <span class="user-status is-offline"></span> 
                                <i class="user-connection fa fa-user"></i>
                                <em>{{conversation.destinationNickname}}</em> 
                                <span class="online-with hidden"></span>
                                <button class="hidden pull-right steal-chat" client-id="{{conversation.destinationId}}" title="{{'admin.steal_conversation'|trans}}"><i class="entypo-eye"></i></button>
                                <span class="typing hidden pull-right"><i>{{'global.typing'|trans}}</i></span>
                            </a>
                        {% endif %}
                    {% endif %}
                {% else %}
                    <a class="disabled" href="return false;">{{'admin.no_chat_history'|trans}}</a>
                {% endfor %}#}
                <a class="disabled" href="return false;">{{'admin.waiting_for_clients'|trans}}</a>
            </div>
        </div>

        <!-- conversation template -->
        <div class="chat-conversation">
            <div class="conversation-header">
                <a href="#" class="conversation-close"><i class="entypo-cancel"></i></a>

                <span class="user-status"></span>
                <span class="display-name"></span> 
                <small></small>
            </div>

            <ul class="conversation-body">	
            </ul>

            <div class="chat-textarea">
                <textarea class="form-control autogrow" placeholder="{{'global.type_your_message'|trans}}"></textarea>
            </div>
            <div class="col-xs-12 margin-bottom flt-left {% if not chatSettings.enableCustomResponses %} hidden {% endif %}" id="container-custom-messages-to-send">
                {% include 'ChatBundle:ChatSettings:customMessagesToSend.html.twig' %}
            </div>
        </div>
    </div>

    <!-- Chat Histories -->
    <div class="container-chats">
        {% set lastDate = '' %}
        {% set lastHour = '' %}
        {% set listedConversations = [] %}
        {% for clientConversation in adminConversations %}
            {% set clientId = clientConversation.senderId %}
            {% if clientConversation.type == constant('Kijho\\ChatBundle\\Entity\\Message::TYPE_ADMIN_TO_CLIENT') %}
                {% set clientId = clientConversation.destinationId %}
            {% endif %}
            
            {% if clientId not in listedConversations %}
                {% set listedConversations = listedConversations|merge([clientId]) %}
                <ul class="chat-history" id="client-{{clientId}}">
                </ul>
            {% endif %}
        {% endfor %}
    </div>

{% endblock %}

{% block scripts %}
        {# Damos click en este boton para desplegar el panel #}
        $(".display-chat").trigger('click');

        {# Ejecutamos una funcion periodicamente para verificar el estado del servidor #}
        window.setInterval(verifyServerConnection, 4000);

        $(".start-gos-server").click(function () {
            $(this).html("{{'global.please_wait'|trans}}");
            $(this).attr('disabled','disabled');
            $.ajax({
                type: 'POST',
                url: "{{path('chat_start_gos_server')}}",
                dataType: 'json',
                timeout: 5000,
                success: function (r)
                {
                    window.setTimeout(function(){
                        $(this).removeAttr('disabled');
                        window.location.reload();
                    }, 3000);
                },
                error: function (r)
                {
                    $(this).removeAttr('disabled');
                    window.location.reload();
                }
            });
        });
        
        $(".stop-gos-server").click(function () {
            $(this).html("{{'global.please_wait'|trans}}");
            $(this).attr('disabled','disabled');
            $.ajax({
                type: 'POST',
                url: "{{path('chat_stop_gos_server')}}",
                dataType: 'json',
                timeout: 5000,
                success: function (r)
                {
                    window.setTimeout(function(){
                        $(this).removeAttr('disabled');
                        window.location.reload();
                    }, 3000);
                },
                error: function (r)
                {
                    $(this).removeAttr('disabled');
                    window.location.reload();
                }
            });
        });
        
        $( "#container-custom-messages" ).on( "click", ".remove-custom-message", function( event ) {
            removeCustomMessage($(this));
        });
        
        $( "#group-1, #group-2" ).on( "click", ".steal-chat", function( event ) {
            stealConversation($(this));
        });
        
        $(".display-online-clients, .hide-online-clients").click(function(){
            $(".display-online-clients").toggleClass('hidden');
            $(".hide-online-clients").toggleClass('hidden');
            $("#group-2").slideToggle('fast');
        });
        
        /* Cada 2 segundos verificamos el número de usuarios online y conversaciones */
        setInterval(countOnlineUsers, 3000);
        setInterval(countLastConversations, 3000);
        
        /* Cada 15 segundos, verificamos el tiempo transcurrido para las ultimas conversaciones */
        setInterval(calculateElapsedTime, 15000);
        calculateElapsedTime();
    {% endblock %}

    {% block other_scripts %}
        {{ ws_client() }}

        <script type = "text/javascript" >
        
        var _WS_URI = "ws://"+window.location.hostname+":{{ gos_web_socket_server_port }}";

        var kijho_chat_web_socket = WS.connect(_WS_URI);

        var kijho_chat_is_success_connect = false;

        var kijho_chat_global_session_admin = null;

        var kijho_chat_last_theme = "{{userSettings.theme}}";

        kijho_chat_web_socket.on("socket/connect", function (session) {
            bindUI(session);
            console.log("Successfully Connected!");
            kijho_chat_is_success_connect = true;
            updateConnectionData(session)
            joinChatRoom(session);
        });

        kijho_chat_web_socket.on("socket/disconnect", function (error) {
            console.log("Disconnected for " + error.reason + " with code " + error.code);
            kijho_chat_is_success_connect = false;
            unbindUI();
        });

        /*Permite cambiar el nickname del usuario*/
        function updateConnectionData(session)
        {
            session.call("rpc/update_connection_data", {"nickname": "{{nickname}}", "user_id": "{{userId}}", "user_type": "{{userType}}", "email":"{{email}}"}).then(
                    function (result) {
                        console.log("RPC Valid!", result);
                    },
                    function (error, desc) {
                        console.log("RPC Error", error, desc);
                    }
            );
        }

        var kijho_chat_messaget_to_client = '';
        // Permite habilitar los eventos sobre los botones de la ventana, cuando hay conexion
        function bindUI(session) {
            kijho_chat_global_session_admin = session;
            $(".chat-textarea textarea").bind("keyup", function (e) {
                var key;
                if (window.event) {
                    key = window.event.keyCode;   /*IE*/
                } else {
                    key = e.which;                /*firefox*/
                }
                if ($('.chat-textarea textarea').val() != '') {
                    kijho_chat_messaget_to_client = $('.chat-textarea textarea').val();
                }
                if (key == 13) {
                    sendMessage(session);
                } else {
                    notifyTyping(session);
                }
            });

            $(".chat-inner").on("click", ".open-client-conversation", function () {
                var clientId = $(this).attr('client-id');
                var messagesLoaded = $(this).attr('messages-loaded');
                if (messagesLoaded == "false") {
                    loadClientConversation(session, clientId);
                    $(this).attr('messages-loaded', "true");
                }
                prepareToMessage(clientId);
                putMessagesReaded(session, clientId);
            });
            
            $(".display-settings").bind("click", function(e) {
                $(".chat-settings").toggleClass('hidden');
            });
            
            $("#chatbundle_user_chat_settings_type_notificationSound").bind("change", function(e) {
                document.getElementById($(this).val()).play();
            });
            
            $(".play-sound").bind("click", function(e) {
                var sound = $("#chatbundle_user_chat_settings_type_notificationSound").val();
                document.getElementById(sound).play();
            });
            
            $(".save-settings").bind("click", function(e) {
                saveSettings(session);
            });
            
            $(".change-status").bind("click", function(e) {
                var newStatus = $(this).attr('status');
                changeStatus(session, newStatus);
            });
            
            $(".add-custom-message").bind("click", function(e) {
                addCustomMessage();
            });
            
            $(".send-custom-message a").bind("click", function(e) {
                sendCustomMessage();
            });
            
            $(".show-custom-messages").bind("click", function(e) {
                $("#container-custom-messages-to-send div.messages").removeClass('hidden');
                $(".hide-custom-messages").removeClass('hidden');
                $(".send-custom-message").removeClass('hidden');
                $(this).addClass('hidden');
            });
            
            $(".hide-custom-messages").bind("click", function(e) {
                hideCustomMessages();
            });
            
            $("#chatbundle_chat_settings_type_enableCustomResponses").bind("change", function(e) {
                var object = $(this);
                if ( object.is(':checked') ) {
                    $("#container-custom-messages").removeClass('hidden');
                    $(".add-custom-message").removeClass('hidden');
                } else {
                    $("#container-custom-messages").addClass('hidden');
                    $(".add-custom-message").addClass('hidden');
                }
            });
        }

        // Permite deshabilitar los eventos sobre los botones, cuando se pierde la conexion
        function unbindUI() {
            kijho_chat_global_session_admin = null;
            $(".chat-textarea textarea").unbind();
            $(".open-client-conversation").unbind();
            $(".display-settings").unbind();
            $("#chatbundle_user_chat_settings_type_notificationSound").unbind();
            $(".play-sound").unbind();
            $(".save-settings").unbind();
            $(".change-status").unbind();
            $(".add-custom-message").unbind();
            $(".remove-custom-message").unbind();
            $(".send-custom-message a").unbind();
            $(".show-custom-messages").unbind();
            $(".hide-custom-messages").unbind();
            $("#chatbundle_chat_settings_type_enableCustomResponses").unbind();
        }

        //permite realizar la conexion a una sala en especifico, y establecer un escucha de eventos
        function joinChatRoom(session) {
            //the callback function in "subscribe" is called everytime an event is published in that channel.
            session.subscribe("{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CHAT_CHANNEL')}}", serverEvent);
        }

        /**
         * Esta funcion permite setear el id del cliente en el texarea 
         * para enviar mensajes, cuando el usuario abre una ventana de chat
         * @param {string} clientId identficador del cliente
         **/
        function prepareToMessage(clientId) {
            $(".chat-textarea textarea").attr('destination-id', clientId);
        }

        /**
         * Permite enviar un mensaje a alguno de los clientes
         * @param {type} session
         * @returns {undefined}
         */
        function sendMessage(session) {
            var textarea = $('.chat-textarea textarea');
            var clientId = textarea.attr('destination-id') + "";

            if (clientId != '' && clientId != 'undefined' && kijho_chat_messaget_to_client != '') {
                
                var data = {type: "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGE_TO_CLIENT')}}",
                    clientId: clientId,
                    message: kijho_chat_messaget_to_client,
                };
                session.publish("{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CHAT_CHANNEL')}}", data);
                kijho_chat_messaget_to_client = '';
            }
        }

        /**
         * Es la funcion que escucha los eventos del servidor 
         * @param {type} uri
         * @param {type} payload
         * @returns {undefined}
         */
        function serverEvent(uri, payload) {

            if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::SERVER_WELCOME_MESSAGE')}}") {
                displayNotification(payload.msg);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGE_FROM_CLIENT')}}") {
                messageFromClient(payload);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::SERVER_ONLINE_USERS')}}") {
                refreshOnlineUsers(payload.online_users);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::SERVER_NEW_CLIENT_CONNECTION')}}") {
                clientJoinRoom(payload);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::SERVER_CLIENT_LEFT_ROOM')}}") {
                clientLeftRoom(payload);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGE_SEND_SUCCESSFULLY')}}") {
                messageSendSuccessfully(payload);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CLIENT_TYPING')}}") {
                clientTyping(payload);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::SETTINGS_UPDATED')}}") {
                settingsUpdated(payload);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::SELF_STATUS_UPDATED')}}") {
                selfStatusUpdated(payload);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CLIENT_STATUS_UPDATED')}}") {
                clientStatusUpdated(payload);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGES_FROM_OTHER_CONVERSATION')}}") {
                messagesFromOtherConversation(payload);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CLIENT_CONVERSATION_HISTORY')}}") {
                displayClientConversationHistory(payload);
            } 
        }

        /**
         * Permite realizar cambios en pantalla una vez enviado un mensaje
         **/
        function messageSendSuccessfully(payload) {
        
            // Verificamos si el cliente no estaba en el listado de last conversations para pasarlo
            var element = $("#group-1 .open-client-conversation[client-id='" + payload.client_id + "']");
            if ($.isEmptyObject(element.html())) {
                
                var otherElement = $("#group-2 .open-client-conversation[client-id='" + payload.client_id + "']");
                
                var firstUser = $('#group-1 a').first();
                if (firstUser.hasClass('disabled')) {
                    firstUser.remove();
                    $('#group-1').append(otherElement);
                } else {
                    $('#group-1 a').first().before(otherElement);
                }
        
                element = $("#group-1 .open-client-conversation[client-id='" + payload.client_id + "']");
                //neonChat.refreshUserIds();
            }
            
            
            // Verificamos si el cliente no es el primero en la lista, para ubicarlo en dicha posicion
            var firstClient = $("#group-1 .open-client-conversation").first();
            if (firstClient.attr('client-id') != payload.user_id) {
                element.prependTo("#group-1");
            }
        
            displayNotification('Message send successfully');
            //$(".chat-conversation i.waiting-response").remove();

            //armamos el html con el mensaje del usuario
            var htmlMessage = '<li class="user">';

            htmlMessage += '<p>' + payload.msg + '</p>'
                    + '<span class="time">' + payload.msg_date + '</span>'
                    + '</li>';

            //buscamos el panel de mensajes del usuario
            var chatContainer = $("#client-" + payload.client_id);

            if (typeof chatContainer == "object") {
                chatContainer.append(htmlMessage);
                
                neonChat.pushMessage(element.attr('id'), payload.msg, ' ', payload.msg_date, false, false);
                neonChat.renderMessages(element.attr('id'));
                $(".chat-textarea textarea").val('');
                
                element.find('span.time-last-message').html('0s');
                element.find('span.time-last-message').removeClass('hidden');
            }
        }

        /**
         * Permite pintar el listado de usuarios conectados
         * @param {string} onlineUsers
         **/
        function refreshOnlineUsers(onlineUsers) {
            
            //verificamos si los online estan en el listado de conversaciones para ponerlos online (verde)
            for (i = 0; i < onlineUsers.length; i++) {
                
                var element = $("#group-1 a[client-id='" + onlineUsers[i]['user_id'] + "']");
                var group = 1;
                if ($.isEmptyObject(element.html())) {
                    element = $("#group-2 a[client-id='" + onlineUsers[i]['user_id'] + "']");
                    group = 2;
                }
                
                if (!$.isEmptyObject(element.html())) {
                    
                    element.attr('online-with', onlineUsers[i]['onlineWithAdmin']);
                    
                    var stealElement = $("#group-"+group+" button.steal-chat[client-id='" + onlineUsers[i]['user_id'] + "']");
                    var onlineWithElement = element.find('span.online-with');
                    
                    if (onlineUsers[i]['onlineWithAdmin'] != '' 
                        && onlineUsers[i]['onlineWithAdmin'] != "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGE_ALL_ADMINISTRATORS')}}"
                        && onlineUsers[i]['onlineWithAdmin'] != "{{nickname}}") {
                            onlineWithElement.removeClass('hidden');
                            
                            var onlineWith = onlineUsers[i]['onlineWithAdmin'];
                            if(onlineWith.length > 11) {
                                onlineWith = onlineWith.substring(0, 11) + '...'; 
                            }
                            
                            onlineWithElement.html('('+onlineWith+')');
                            onlineWithElement.attr('title', "{{'global.online_with'|trans}}"+onlineUsers[i]['onlineWithAdmin']);
                            stealElement.removeClass('hidden');
                    } else {
                        stealElement.addClass('hidden');
                        onlineWithElement.addClass('hidden');
                    }
                    
                    var spanStatus = $("#group-"+group+" a[client-id='" + onlineUsers[i]['user_id'] + "'] span").first();
                    spanStatus.attr('class', 'user-status '+ onlineUsers[i]['status']);
                
                    var iconConnection = $("#group-"+group+" a[client-id='" + onlineUsers[i]['user_id'] + "'] i.user-connection");
                    if (onlineUsers[i]['isAnonymous'] && iconConnection.hasClass('fa-user')) {
                        iconConnection.removeClass('fa-user');
                        iconConnection.addClass('fa-user-secret');
                        iconConnection.attr('title',"{{'global.anonymous_user'|trans}}");
                    } else if (!onlineUsers[i]['isAnonymous'] && iconConnection.hasClass('fa-user-secret')) {
                        iconConnection.removeClass('fa-user-secret');
                        iconConnection.addClass('fa-user');
                        iconConnection.attr('title',"{{'global.authenticated_user'|trans}}");
                    }
                } else {
                    clientJoinRoom(onlineUsers[i]);
                }
            }
            //neonChat.orderGroups();
        }

        /**
         * Permite realizar acciones en pantalla cuando un cliente
         * sale del chat 
         * @param {type} payload
         **/
        function clientLeftRoom(payload) {
        
            // Debemos verificar si esta en el grupo1 para hacer los cambios ahi
            var element = $("#group-1 a[client-id='" + payload.user_id + "']");
            var group = 1;
            if ($.isEmptyObject(element.html())) {
                element = $("#group-2 a[client-id='" + payload.user_id + "']");
                group = 2;
            }
        
            if (!$.isEmptyObject(element.html())) {
                var spanStatus = $("#group-"+group+" a[client-id='" + payload.user_id + "'] span").first();
                spanStatus.attr('class', 'user-status is-offline');
            }
            neonChat.refreshUserIds();
            //neonChat.orderGroups();
        }

        /**
         * Permite realizar acciones en pantalla cuando un cliente
         * se conecta al chat
         * @param {type} payload
         **/
        function clientJoinRoom(payload) {
            
            console.log('llego un nuevo cliente '+payload.nickname);
            
            // Debemos verificar si esta en el grupo 1 para hacer los cambios alla
            var element = $("#group-1 a[client-id='" + payload.user_id + "']");
            var group = 1;
            if ($.isEmptyObject(element.html())) {
                element = $("#group-2 a[client-id='" + payload.user_id + "']");
                group = 2;
            }
            
            if (!$.isEmptyObject(element.html())) {
                var spanStatus = $("#group-"+group+" a[client-id='" + payload.user_id + "'] span").first();
                spanStatus.attr("class", "user-status "+payload.status); 
            } else {
                
                // No se encontro el usuario en ningun listado, lo ponemos en el listado de online
                
                var currentDate = getCurrenDateFormated();
                var htmlUser = '<a href="#" class="open-client-conversation" client-id="' + payload.user_id + '" online-with="" data-conversation-history="#client-' + payload.user_id + '" messages-loaded="false" date="'+currentDate+'"><span class="user-status '+payload.status+'"></span> ';
                if (payload.isAnonymous) {
                    htmlUser += '<i class="user-connection fa fa-user-secret"></i> '; 
                } else{
                    htmlUser += '<i class="user-connection fa fa-user"></i> '; 
                }
                htmlUser += '<em>' + payload.nickname + '</em>'; 
                htmlUser += '<span class="badge badge-info is-hidden">0</span> ';
                htmlUser += '<span class="online-with hidden"></span>';
                htmlUser += '<button class="hidden pull-right steal-chat" client-id="' + payload.user_id + '" title="{{'admin.steal_conversation'|trans}}"><i class="entypo-eye"></i></button>';
                htmlUser += '<span class="typing hidden"><i>{{'global.typing'|trans}}</i></span>';
                htmlUser += '<span class="time-last-message hidden pull-right"></span></a>';
                var firstUser = $('#group-2 a').first();
                if (!$.isEmptyObject(firstUser.html())) {
                    if (firstUser.hasClass('disabled')) {
                        firstUser.remove();
                        $('#group-2').append(htmlUser);
                    } else {
                        $('#group-2 a').first().before(htmlUser);
                    }
                } else {
                    $('#group-2').append(htmlUser);
                }
            }
            neonChat.refreshUserIds();
            //neonChat.orderGroups();
            
            //buscamos el panel de mensajes del usuario
            var chatContainer = $("#client-" + payload.user_id);
            if ($.isEmptyObject(chatContainer.html())) {
                var html = '<ul class="chat-history" id="client-' + payload.user_id + '"></ul>';
                $(".container-chats").append(html);
            } 
        }

        /**
         * Permite verificar el estado del servidor gos para ocultar o mostrar 
         * el boton de inicio manual del servidor
         */
        function verifyServerConnection() {
            if (kijho_chat_is_success_connect) {
                $('#container-server-start').css('display', 'none');
                $(".container-server-stop").css('display', '');
            } else {
                $('#container-server-start').css('display', '');
                $(".container-server-stop").css('display', 'none');
            }
        }

        /**
         * Permite marcar los mensajes de un cliente como leidos
         * @param {string} clientId identificador del cliente
         **/
        function putMessagesReaded(session, clientId) {
            if (clientId != '') {
                var data = {type: "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::PUT_MESSAGES_AS_READED')}}",
                    clientId: clientId,
                };
                session.publish("{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CHAT_CHANNEL')}}", data);

                var chatContainer = $("#client-" + clientId);
                chatContainer.find('li.unread').removeClass('unread');
            }
        }

        /**
         * Permite realizar acciones en pantalla cuando llega un mensaje de un cliente
         * @param {type} payload
         **/
        function messageFromClient(payload) {
            // Si el cliente onlie envia un mensaje, lo mostramos en el grupo de last conversations
            var element = $("#group-1 .open-client-conversation[client-id='" + payload.user_id + "']");
            if ($.isEmptyObject(element.html())) {
                var otherElement = $("#group-2 .open-client-conversation[client-id='" + payload.user_id + "']");
                
                var firstUser = $('#group-1 a').first();
                if (firstUser.hasClass('disabled')) {
                    firstUser.remove();
                    $('#group-1').append(otherElement);
                } else {
                    $('#group-1 a').first().before(otherElement);
                }
                element = $("#group-1 .open-client-conversation[client-id='" + payload.user_id + "']");
                //neonChat.refreshUserIds();
                //neonChat.orderGroups();
            }
            
            // Verificamos si el cliente no es el primero en la lista, para ubicarlo en dicha posicion
            var firstClient = $("#group-1 .open-client-conversation").first();
            if (firstClient.attr('client-id') != payload.user_id) {
                element.prependTo("#group-1");
            }
            
            displayNotification("{{'admin.new_message_from'|trans}}" + payload.nickname);
            
            $(".play-sound").trigger('click');

            //buscamos el tab de conversacion del usuario en el listado de conversaciones
            //var element = $(".open-client-conversation[client-id='" + payload.user_id + "']");
            if (!$.isEmptyObject(element.html())) {
                increaseUnreadCounters(element);

                //armamos el html con el mensaje del usuario
                var htmlMessage = '<li class="opponent unread" message-id="'+payload.msg_id+'">';

                if (payload.admin_destination == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGE_ALL_ADMINISTRATORS')}}") {
                    htmlMessage += '<span class="user pull-left">' + payload.nickname + ' <i class="pull-right waiting-response">({{'admin.waiting_admin_response'|trans}})</i></span>';
                } else {
                    //htmlMessage += '<span class="user">' + payload.nickname + '</span>';
                }
                htmlMessage += '<p>' + payload.msg + '</p>'
                        + '<span class="time">' + payload.msg_date + '</span>'
                        + '</li>';

                //buscamos el panel de mensajes del usuario
                var chatContainer = $("#client-" + payload.user_id);
                if (typeof chatContainer == "object") {
                    chatContainer.append(htmlMessage);
                } else {
                    //si no habia un panel de mensajes para el usuario, le creamos uno
                    var html = '<ul class="chat-history" id="client-' + payload.user_id + '">'
                            + htmlMessage + '</ul>';
                    $(".container-chats").append(html);
                }

                var messagesLoaded = element.attr('messages-loaded');
                if (messagesLoaded == "true" || payload.admin_destination == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGE_ALL_ADMINISTRATORS')}}") {
                    neonChat.pushMessage(element.attr('id'), payload.msg, ' ', payload.msg_date, true, true);
                }
                
                if (isConversationOpened(payload.user_id)) {
                    //debemos marcar los mensajes como leidos
                    if (kijho_chat_global_session_admin) {
                        putMessagesReaded(kijho_chat_global_session_admin, payload.user_id);
                    }
                    //ocultar el icono de unread
                    neonChat.resetUnreads(element.attr('id'));
                    neonChat.renderMessages(element.attr('id'));
                    
                    neonChat.puffUnreadsAll();
                }

                //validamos si otro administrador ya atendio al cliente, para quitar la alerta
                if (payload.admin_destination != "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGE_ALL_ADMINISTRATORS')}}" 
                        && "{{userId}}" != payload.admin_destination) {
                    //console.log('por acaca '+ payload.admin_destination);
                    //$(".chat-conversation i.waiting-response").remove();
                }
                
                // Seteamos con la fecha actual el envio del ultimo mensaje
                element.find('span.time-last-message').html('0s');
                element.find('span.time-last-message').removeClass('hidden');
            }

        }

        /**
         * Permite incrementar los contadores de mensajes no leidos
         * cuando un cliente envia un nuevo mensaje
         * @param {type} element
         **/
        function increaseUnreadCounters(element) {
            //buscamos el span para aumentar los mensajes sin leer del usuario
            var span = element.find("span.badge");
            var unreadMessages = parseInt(span.text());
            if (unreadMessages == 0) {
                span.removeClass('is-hidden');
            }
            span.text(unreadMessages + 1);

            //buscamos el span para aumentar los mensajes sin leer de todos los usuarios
            var generalSpan = $(".chat-header span.badge");
            var unreadMessages = parseInt(generalSpan.text());
            if (unreadMessages == 0) {
                generalSpan.removeClass('is-hidden');
            }
            generalSpan.text(unreadMessages + 1);
        }


        /**
         * Permite desplegar el mensaje que indica que un cliente esta escribiendo
         **/
        function clientTyping(payload) {
            
            if (!payload.online_with 
                    || payload.online_with == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGE_ALL_ADMINISTRATORS')}}" 
                    || payload.online_with == "{{nickname}}") {
                
                var tabConversation = $(".open-client-conversation[client-id='" + payload.user_id + "']");
                tabConversation.find("span.typing").removeClass('hidden');
                window.setTimeout(hideTyping, 2000);
            }
        }

        /**
         * Permite desplegar un mensaje en el panel de notificaciones
         **/
        function displayNotification(msg) {
            $("#container-notification").html(msg);
            $("#container-notification").removeClass('hidden');
            window.setTimeout(hideNotification, 2000);
        }

        /**
         * Permite ocultar el panel de notificaciones
         **/
        function hideNotification() {
            var object = $("#container-notification");
            if (!object.hasClass('hidden')) {
                object.addClass('hidden');
            }
        }

        /**
         * Permite ocultar el mensaje que indica que un cliente esta escribiendo
         **/
        function hideTyping() {
            $(".open-client-conversation span.typing").each(function () {
                var object = $(this);
                if (!object.hasClass('hidden')) {
                    object.addClass('hidden');
                }
            });
        }

        /**
         * Permite enviar las nuevas configuraciones del chat al servidor 
         * para que sean validadas y almacenadas
         **/
        function saveSettings(session) {
            
            var customMessages = [];
            $("#container-custom-messages textarea").each(function() {
                customMessages.push($(this).val());
            });
            
            var enableCustomMessages = false;
            
            if ( $("#chatbundle_chat_settings_type_enableCustomResponses").is(':checked') ) {
                enableCustomMessages = true;
            }
            
            var data = {type: "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::UPDATE_SETTINGS')}}",
                notificationSound: $("#chatbundle_user_chat_settings_type_notificationSound").val(),
                theme: $("#chatbundle_user_chat_settings_type_theme").val(),
                emailOfflineMessages: $("#chatbundle_chat_settings_type_emailOfflineMessages").val(),
                automaticWelcomeMessage: $("#chatbundle_chat_settings_type_automaticMessage").val(),
                enableCustomMessages: enableCustomMessages,
                customMessages: customMessages,
            };
            session.publish("{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CHAT_CHANNEL')}}", data);
            
            $(".save-settings").html("{{'global.please_wait'|trans}}");
            $(".save-settings").attr('disabled','disabled');
        }
        
        /**
         * Permite realizar cambios en pantalla una vez almacenadas las 
         * configuraciones del chat
         **/
        function settingsUpdated(payload) {
            $(".save-settings").html("{{'global.save_changes'|trans}}");
            $(".save-settings").removeAttr('disabled');
            $(".chat-settings").toggleClass('hidden');
            $("#container-custom-messages-to-send div.messages").html(payload.html_custom_messages);
            
            if (payload.enableCustomMessages) {
                $("#container-custom-messages-to-send").removeClass('hidden');
            } else {
                $("#container-custom-messages-to-send").addClass('hidden');
            }
            
            if (payload.theme != kijho_chat_last_theme) {
                window.location.reload();
            }
            
        }
        
        /**
         * Permite solicitar al servidor el cambio de estado del usuario
         */
        function changeStatus(session, newStatus) {
            var data = {type: "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CHANGE_ADMIN_STATUS')}}",
                newStatus: newStatus,
            };
            session.publish("{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CHAT_CHANNEL')}}", data);
        }
        
        /**
         * Permite modificar visualmente el cambio de estado realizado por el admin
         */
        function selfStatusUpdated(payload) {
            $(".chat-header span.main-status").removeClass(payload.previous_status);
            $(".chat-header span.main-status").addClass(payload.new_status);
        }
        
        /**
         * Permite actualizar en pantalla en nuevo estado de un cliente
         */
        function clientStatusUpdated(payload) {
            var tabConversation = $(".open-client-conversation[client-id='" + payload.user_id + "']");
            tabConversation.find("span.user-status").removeClass(payload.previous_status);
            tabConversation.find("span.user-status").addClass(payload.new_status);
            if (isConversationOpened(payload.user_id)) {
                $(".chat-conversation .conversation-header .user-status").removeClass(payload.previous_status);
                $(".chat-conversation .conversation-header .user-status").addClass(payload.new_status);
                var statusClass = payload.new_status;
                var statusLabel = neonChat.statuses[statusClass.substring(3)]['label'];
                $(".chat-conversation .conversation-header small").html(statusLabel);
            }
        }

        /**
         * Permite duplicar el html para poder ingresar una nueva frase
         */
        function addCustomMessage() {
            var numberChilds = $("#container-custom-messages div.custom-message").length;
            $("#container-custom-messages div.custom-message:last").clone().appendTo("#container-custom-messages");
            var newChild = $("#container-custom-messages div.custom-message:last");
            newChild.find('label:first').html(parseInt(numberChilds + 1) + '.');
            newChild.find('textarea').val('');
            newChild.find('textarea').focus();
        }
        
        /**
         * Permite eliminar el html correspondiente a una frase en especifico
         */
        function removeCustomMessage(object) {
            
            var numberChilds = $("#container-custom-messages div.custom-message").length;
            
            if (numberChilds > 1) {
                object.parent().remove();
                var index = 1;
                $("#container-custom-messages div.custom-message").each(function() {
                    $(this).find('label:first').html(index);
                    index++;
                });
            }
        }
        
        /**
         * Permite ocultar el panel de mensajes personalizados
         */
        function hideCustomMessages() {
            $("#container-custom-messages-to-send div.messages").addClass('hidden');
            $(".show-custom-messages").removeClass('hidden');
            $(".send-custom-message").addClass('hidden');
            $(".hide-custom-messages").addClass('hidden');
        }
        
        /**
         * Permite enviar mensajes predefinidos a los clientes
         * @returns {undefined}
         */
        function sendCustomMessage() {
            $(".custom-message-to-send input").each( function () {
                var input = $(this);
                if ( input.is(':checked') ) {
                    kijho_chat_messaget_to_client = $(".custom-message-to-send label[for='"+input.attr('id')+"']").html();
                    if (kijho_chat_messaget_to_client != '') {
                        var clientId = $(".chat-textarea textarea").attr('destination-id') + "";
                        var element = $(".open-client-conversation[client-id='" + clientId + "']");
                        if (!$.isEmptyObject(element.html())) {
                            $(".chat-textarea textarea").val(kijho_chat_messaget_to_client);
                            sendMessage(kijho_chat_global_session_admin);
                            hideCustomMessages();
                        }
                    }
                }
            });
        }
        
        /**
         * Permite notificarle al cliente que el administrador le esta escribiendo un mensaje
         */
        function notifyTyping(session) {
            var textarea = $('.chat-textarea textarea');
            var clientId = textarea.attr('destination-id') + "";

            if (clientId != '' && clientId != 'undefined') {
                
                var data = {type: "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::ADMIN_TYPING')}}",
                    clientId: clientId,
                };
                session.publish("{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CHAT_CHANNEL')}}", data);
            }
        }
        
        /**
         * Esta funcion permite solicitar al servidor el robo de una conversacion
         * de un cliente, el cual estaba hablando con otro administrador
         **/
        function stealConversation(object) {
            var clientId = object.attr('client-id');
            
            if (clientId != '' && clientId != 'undefined') {
                var data = {type: "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::STEAL_CONVERSATION_WITH_CLIENT')}}",
                    clientId: clientId,
                };
                kijho_chat_global_session_admin.publish("{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CHAT_CHANNEL')}}", data);
            }
        }
        
        /**
         * Permite mostrar en pantalla los mensajes que han sido transferidos de otra conversacion
         **/
        function messagesFromOtherConversation(payload) {
            displayNotification("{{'admin.stealed_conversation'|trans}}");

            //buscamos el tab de conversacion del usuario en el listado de conversaciones
            var element = $(".open-client-conversation[client-id='" + payload.client_id + "']");
            
            var messages = payload.messages;
            var userIdentifier = payload.client_id;
            
            if (!$.isEmptyObject(element.html())) {
                
                for (var i = 0; i < messages.length; i++) {
                    increaseUnreadCounters(element);
                    
                    var fromOpponent = false;
                    //armamos el html con el mensaje del usuario
                    if (messages[i].type == "{{constant('Kijho\\ChatBundle\\Entity\\Message::TYPE_CLIENT_TO_ADMIN')}}") {
                        var htmlMessage = '<li class="opponent unread">';
                        fromOpponent = true;
                    } else if (messages[i].type == "{{constant('Kijho\\ChatBundle\\Entity\\Message::TYPE_ADMIN_TO_CLIENT')}}") {
                        var htmlMessage = '<li class="user unread">';
                    }
                    
                    htmlMessage += '<span class="user">' + messages[i].sender_nickname + '</span>';

                    htmlMessage += '<p>' + messages[i].message + '</p>'
                            + '<span class="time">' + messages[i].hour + '</span>'
                            + '</li>';

                    //buscamos el panel de mensajes del usuario
                    var chatContainer = $("#client-" + userIdentifier);

                    if (typeof chatContainer == "object") {
                        chatContainer.append(htmlMessage);
                    } else {
                        //si no habia un panel de mensajes para el usuario, le creamos uno
                        var html = '<ul class="chat-history" id="client-' + userIdentifier + '">'
                                + htmlMessage + '</ul>';
                        $(".container-chats").append(html);
                        
                        var chatContainer = $("#client-" + userIdentifier);
                        if (!$.isEmptyObject(chatContainer.html())) {
                            chatContainer.append(htmlMessage);
                        }
                    }
                    neonChat.pushMessage(element.attr('id'), messages[i].message, messages[i].sender_nickname, messages[i].hour, fromOpponent, true);
                }

                if (isConversationOpened(userIdentifier)) {
                    //debemos marcar los mensajes como leidos
                    if (kijho_chat_global_session_admin) {
                        neonChat.resetUnreads(element.attr('id'));
                        neonChat.puffUnreadsAll();
                    }
                    neonChat.renderMessages(element.attr('id'));
                }
            }
        }
        
        /**
         * Permite saber si la ventana de conversacion esta abierta para 
         * un cliente determinado
         **/
        function isConversationOpened(clientIdentifier) {
            var display = $('.chat-conversation').css('display');
            //verificamos si la ventana de chat esta abierta
            if (display == 'block') {
                //si esta abierta preguntamos si el mensaje entrante es del chat abierto
                var userId = $(".chat-conversation div.chat-textarea textarea.form-control").attr('destination-id');
                if (userId == clientIdentifier) {
                    return true;
                }
            } return false;
        }
        
        
        /**
         * Permite solicitar al servidor la carga de los mensajes de un cliente en especifico
         */
        function loadClientConversation(session, clientId) {
            if (clientId != '') {
                var data = {type: "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::LOAD_CLIENT_CONVERSATION')}}",
                    clientId: clientId,
                    adminId: "{{userId}}"
                };
                session.publish("{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CHAT_CHANNEL')}}", data);
            }
        }
        
        /**
         * Permite desplegar en pantalla el listado de mensajes de un cliente en especifico
         */
        function displayClientConversationHistory(data) {
            
            var element = $(".open-client-conversation[client-id='" + data.clientId + "']");
        
            var messages = data.messages;
            var date = '';
            
            var chatContainer = $("#client-" + data.clientId);
            if (typeof chatContainer == "object") {
                chatContainer.html('');
                $(".chat-conversation ul.conversation-body").html('');
            }
            
            for (var i = 0; i < messages.length; i++) {
                var fromOpponent = false;
                //armamos el html con el mensaje del usuario
                if (messages[i].type == "{{constant('Kijho\\ChatBundle\\Entity\\Message::TYPE_CLIENT_TO_ADMIN')}}") {
                    var htmlMessage = '<li class="opponent">';
                    fromOpponent = true;
                } else if (messages[i].type == "{{constant('Kijho\\ChatBundle\\Entity\\Message::TYPE_ADMIN_TO_CLIENT')}}") {
                    var htmlMessage = '<li class="user">';
                }

                htmlMessage += '<span class="user">' + messages[i].sender_nickname + '</span>';

                htmlMessage += '<p>' + messages[i].message + '</p>'
                        + '<span class="time">' + messages[i].hour + '</span>'
                        + '</li>';

                //buscamos el panel de mensajes del usuario
                if (typeof chatContainer == "object") {
                    chatContainer.append(htmlMessage);
                } else {
                    //si no habia un panel de mensajes para el usuario, le creamos uno
                    var html = '<ul class="chat-history" id="client-' + data.clientId + '">'
                            + htmlMessage + '</ul>';
                    $(".container-chats").append(html);
                }
                
                if (date != messages[i].date) {
                    var showDate = messages[i].date + " " +messages[i].hour; 
                    date = messages[i].date;
                } else {
                    var showDate = messages[i].hour; 
                }

                neonChat.pushMessage(element.attr('id'), messages[i].message, ' ', showDate, fromOpponent, false);
            }
            
            if (isConversationOpened(data.clientId)) {
                neonChat.renderMessages(element.attr('id'));
            }
        }
        
        /**
         * Permite contar el numero de usuarios online
         * @returns {undefined}         
         **/
        function countOnlineUsers() {
            $(".counter-indicator").removeClass('hidden');
            var countOnline = $( "#group-2 a.open-client-conversation span.is-online" ).length;
            $("#counter-online-users").html(countOnline);
        }
        
        /**
         * Permite contar el numero de ultimas conversaciones
         * @returns {undefined}         
         **/
        function countLastConversations() {
            var countOnline = $( "#group-1 a.open-client-conversation" ).length;
            $("#counter-last-conversations").html(countOnline);
        }
        
        /**
         * Permite calcular el tiempo transcurrido entre el ultimo mensaje
         * de un cliente y la hora actual
         * @returns {undefined}         
         * */
        function calculateElapsedTime() {
            var now = new Date();
            
            $("#group-1 a.open-client-conversation").each(function () {
                var object = $(this);
                var stringDate = object.attr('date');
                var arrayDate = stringDate.split(",");
                var messageDate = new Date(arrayDate[0],arrayDate[1]-1,arrayDate[2],arrayDate[3],arrayDate[4],arrayDate[5]);
                
                var diffMs = (messageDate - now); // milliseconds between now & Christmas
                var diffHrs = Math.abs(Math.round((diffMs % 86400000) / 3600000)); // hours
                var diffMins = Math.abs(Math.round(((diffMs % 86400000) % 3600000) / 60000)); // minutes
                
                var diffSecs =  Math.abs(Math.round((((diffMs % 86400000) % 3600000) % 60000) / 1000)); // seconds
                
                var textDiff = '';
                if (diffHrs > 0) {
                    textDiff += diffHrs + 'h ';
                }
                if (diffMins > 0) {
                    textDiff += diffMins + 'm ';
                } else if (diffHrs == 0) {
                    textDiff += diffSecs + 's ';
                }
                
                if (textDiff != '') {
                    object.find('span.time-last-message').html(textDiff);
                    object.find('span.time-last-message').removeClass('hidden');
                }
            });
        }
        
        function getCurrenDateFormated() {
            var currentDate = new Date();
            currentDate = currentDate.getFullYear()+','+currentDate.getMonth()+','+currentDate.getDate()+','+
                    +currentDate.getHours()+','+currentDate.getMinutes()+','+currentDate.getSeconds();
            return currentDate;
        }

    </script>
{% endblock %}