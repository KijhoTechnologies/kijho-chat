{% extends 'ChatBundle:Default:mainClient.html.twig' %}
{% block title %}Chat Bundle{% endblock %}
{% block content %}
    
        {% if local is defined and local == true %}
            <div class="main-content">
                <div class="row">
                    <!-- Raw Links -->
                    <div class="col-md-6 pull-right">
                        <ul class="list-inline links-list ">
                            <li>
                                <a id="display-chat" href="#" data-toggle="chat" data-animate="1" data-collapse-sidebar="1">
                                    <i class="entypo-chat"></i>
                                    Chat
                                    <span class="badge badge-success chat-notifications-badge is-hidden">0</span>
                                </a>
                            </li>
                        </ul>
                        <span id="container-notification"></span>
                    </div>
                </div>
                <hr />
                <div class="col-lg-12" style="height: 400px; min-height: 400px;">    
                </div>
            </div>
        {% endif %}
    
        <div id="chat" class="fixed">
            <div class="chat-inner">
                <div class="panel panel-primary" style="margin: 8px;">
                    <div class="panel-heading panel-heading-chat" style="height: auto;">
                        <span class="main-status user-status {{userSettings.status}}"></span>
                        <span class="glyphicon glyphicon-comment"></span>
                        Chat <span class="badge badge-success is-hidden">0</span>
                        <div class="btn-group pull-right">
                            <button data-toggle="dropdown" class="btn btn-default btn-xs dropdown-toggle" type="button">
                                <span class="glyphicon glyphicon-chevron-down"></span>
                            </button>
                            <ul class="dropdown-menu slidedown">
                                <li>
                                    <a href="javascript:window.location.reload();"><span class="glyphicon glyphicon-refresh"></span>Refresh</a>
                                </li>
                                <li>
                                    <a href="javascript:void(0);" class="change-status" status="{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::STATUS_ONLINE')}}"><span class="glyphicon glyphicon-ok-sign"></span>Online</a>
                                </li>
                                <li>
                                    <a href="javascript:void(0);" class="change-status" status="{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::STATUS_BUSY')}}"><span class="glyphicon glyphicon-remove"></span>Busy</a>
                                </li>
                                <li>
                                    <a href="javascript:void(0);" class="change-status" status="{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::STATUS_IDLE')}}"><span class="glyphicon glyphicon-time"></span>Away</a>
                                </li>
                                <li>
                                    <a href="javascript:void(0);" class="change-status" status="{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::STATUS_OFFLINE')}}"><span class="glyphicon glyphicon-off"></span>Offline</a>
                                </li>
                                <li class="divider"></li>
                                <li>
                                    <a href="javascript:void(0);" class="display-settings"><span class="glyphicon glyphicon-cog"></span>Settings</a>
                                </li>
                            </ul>
                        </div>
                        
                        <div class="row chat-settings col-lg-12 hidden">
                            <a><i class="entypo-cog"></i> Chat Settings</a>
                            <i class="entypo-cancel display-settings pull-right"></i><br>
                            <div class="form-group margin-top">
                                <div class="col-xs-9 no-padding-left">
                                    {{ form_label(userSettingsForm.notificationSound)}}
                                    {{ form_widget(userSettingsForm.notificationSound,{'attr':{'class':'form-control'}})}}
                                </div>
                                <div class="col-xs-3 no-padding" style="padding-top: 24px;">
                                    <a class="btn btn-sm play-sound no-padding"><i class="entypo-play"></i> Play</a>
                                </div>
                            </div>
                            <div class="form-group col-xs-12 flt-left margin-top no-padding">
                                <button class="btn btn-primary pull-right save-settings">Save Changes</button>
                            </div>
                            <div class="hidden">
                                {% set sounds = { 0 : 'sounds-capisci.mp3',
                                                  1 : 'sounds-come-to-daddy.mp3', 
                                                  2 : 'sounds-communication-channel.mp3',
                                                  3 : 'sounds-credulous.mp3', 
                                                  4 : 'sounds-et-voila.mp3', 
                                                  5 : 'sounds-gets-in-the-way.mp3', 
                                                  6 : 'sounds-isnt-it.mp3',
                                                  7 : 'sounds-no-way.mp3',
                                                  8 : 'sounds-obey.mp3',
                                                  9 : 'sounds-pedantic.mp3',
                                                  10 : 'sounds-served.mp3',
                                                  11 : 'sounds-surprise-on-a-spring.mp3',
                                                  12 : 'sounds-worthwhile.mp3',
                                                  13 : 'sounds-you-know.mp3',
                                                  14 : 'sounds-your-turn.mp3',
                                                    } %}
                                {% for sound in sounds %}
                                    <audio controls id="{{sound}}">
                                        <source src="{{asset('bundles/chat/sounds/'~sound)}}" type="audio/mpeg">
                                    </audio>
                                {% endfor %}
                            </div>
                        </div>
                    </div>
                    <div class="chat-container">
                        <div class="panel-body ">
                            <ul class="chat" id="message-list">
                            </ul>
                        </div>
                        <div class="panel-footer">
                            <div class="input-group">
                                <input id="input-message" type="text" class="form-control input-sm" placeholder="Type your message here...">
                                <span class="input-group-btn">
                                    <button class="btn btn-primary btn-sm send-message" id="btn-chat">
                                        Send</button>
                                </span>
                            </div>
                        </div>
                    </div>
                            
                    <div class="admin-offline hidden">
                        <div class="panel-body" style="height: 333px;">
                            <form onsubmit="return false;" id="contact-form">
                                <p class="col-xs-12 margin-top">No personal support online, please fill out the form below to send and email:</p>
                                <div class="col-xs-12 margin-top flt-left">
                                    {{ form_label(contactForm.email) }}
                                    {{ form_widget(contactForm.email,{'attr':{'class':'form-control'}}) }}
                                </div>
                                <div class="col-xs-12 margin-top flt-left">
                                    {{ form_label(contactForm.subject) }}
                                    {{ form_widget(contactForm.subject,{'attr':{'class':'form-control'}}) }}
                                </div>
                                <div class="col-xs-12 margin-top flt-left">
                                    {{ form_label(contactForm.message) }}
                                    {{ form_widget(contactForm.message,{'attr':{'class':'form-control'}}) }}
                                </div>
                                <div class="col-xs-12 margin-top flt-left margin-bottom">
                                    <button class="btn btn-primary btn-sm pull-right send-contact-form">Send</button>
                                </div>
                            </form>
                            <div class="col-xs-12 margin-top flt-left contact-message-notification hidden">
                                <div class="alert alert-success">Message send successfully</div>
                                <div class="col-xs-6 flt-left">
                                    <a class="btn btn-primary btn-sm send-other-message">Send other message</a>
                                </div>
                                <div class="col-xs-6 flt-left">
                                    <a class="btn btn-danger btn-sm pull-right close-message-notification">Close</a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
{% endblock %}

{% block other_scripts %}
    {{ ws_client() }}

    <script type="text/javascript">
        var _WS_URI = "ws://{{ gos_web_socket_server_host }}:{{ gos_web_socket_server_port }}";

        var webSocket = WS.connect(_WS_URI);

        var globalSession = null;
        
        var onlineAdministrators = 0;

        webSocket.on("socket/connect", function (session) {
            bindUI(session);
            console.log("Successfully Connected!");
            updateConnectionData(session)
            joinChatRoom(session);
        });

        webSocket.on("socket/disconnect", function (error) {
            console.log("Disconnected for " + error.reason + " with code " + error.code);
            unbindUI();
        });

        
        /**
         * Permite actualizar la informacion de la conexion del usuario
         * @param {type} session
         */
        function updateConnectionData(session)
        {
            session.call("rpc/update_connection_data", {"nickname": "{{nickname}}", "user_id": "{{userId}}", "user_type": "{{userType}}"}).then(
                    function (result)
                    {
                        console.log("RPC Valid!", result);
                    },
                    function (error, desc)
                    {
                        console.log("RPC Error", error, desc);
                    }
            );
        }

        /**
         * Permite habilitar los eventos sobre los elementos de la ventana, cuando hay conexion
         * @param {type} session
         */
        function bindUI(session) {
            globalSession = session;
            $("#input-message").bind("keydown", function (e) {
                var key;
                if (window.event) {
                    key = window.event.keyCode;   /*IE*/
                } else {
                    key = e.which;                /*firefox*/
                }
                if (key == 13) {
                    sendMessage(session);
                } else {
                    notifyTyping(session);
                }
            });

            $(".send-message").bind("click", function (e) {
                sendMessage(session);
            });
            
            $("#display-chat").bind("click", function (e) {
                putMessagesReaded();
            });
            
            $(".display-settings").bind("click", function(e) {
                $(".chat-settings").toggleClass('hidden');
            });
            
            $("#chatbundle_user_chat_settings_type_notificationSound").bind("change", function(e) {
                document.getElementById($(this).val()).play();
            });
            
            $(".play-sound").bind("click", function(e) {
                var sound = $("#chatbundle_user_chat_settings_type_notificationSound").val();
                document.getElementById(sound).play();
            });
            
            $(".save-settings").bind("click", function(e) {
                saveSettings(session);
            });
            
            $(".change-status").bind("click", function(e) {
                var newStatus = $(this).attr('status');
                changeStatus(session, newStatus);
            });
            
            $(".send-contact-form").bind("click", function(e) {
                sendContactForm(session);
            });
            
            $(".send-other-message").bind("click", function(e) {
                $(".contact-message-notification").addClass('hidden');
                $("#contact-form").removeClass('hidden');
            });
            
            $(".close-message-notification").bind("click", function(e) {
                $("#display-chat").trigger('click');
            });
        }

        /**
         * Permite deshabilitar los eventos sobre los botones, cuando se pierde la conexion
         */
        function unbindUI() {
            globalSession = null;
            $(".send-message").unbind();
            $("#input-message").unbind();
            $(".display-settings").unbind();
            $("#chatbundle_user_chat_settings_type_notificationSound").unbind();
            $(".play-sound").unbind();
            $(".save-settings").unbind();
            $(".change-status").unbind();
            $(".send-contact-form").unbind();
            $(".send-other-message").unbind();
            $(".close-message-notification").unbind();
        }

        /**
         * Permite realizar la conexion a una sala en especifico, y establecer un escucha de eventos
         * @param {type} session
         */
        function joinChatRoom(session) {
            //the callback function in "subscribe" is called everytime an event is published in that channel.
            session.subscribe("chat/channel", serverEvent);
        }

        /**
         * Cuando el cliente entra al chat, los primeros mensajes que envia (antes de que un administrador le responda)
         * son enviados a todos los administradores, cuando un admin responde, los mensajes seran solo 
         * enviados a dicho administrador
         * @type String
         */
        var destination = "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGE_ALL_ADMINISTRATORS')}}";

        /**
         * Permite el envio de un mensaje a un usuario en especifico
         * @param {type} session
         */
        function sendMessage(session) {
            var message = $("#input-message").val();
            if (message != '') {
                var data = {type: "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGE_TO_ADMIN')}}",
                    message: message,
                    destination: destination,
                };
                session.publish("chat/channel", data);
                $("#input-message").val('');
            }
            $("#input-message").focus();
        }

        /**
         * Funcion que escucha los eventos del servidor para efectuar acciones en pantalla
         * @param {type} uri
         * @param {type} payload
         **/
        function serverEvent(uri, payload) {
            if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::SERVER_WELCOME_MESSAGE')}}") {
                $("#message-list").prepend('<li>' + payload.msg + '</li>');
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGE_FROM_ADMIN')}}") {
                destination = payload.user_id;
                $(".play-sound").trigger('click');
                appendHtmlMessageAdmin(payload);
                //displayChatPanel();
                updateUnreadCounters(1);
                var displayStatus = $("#chat").css('display');
                if (displayStatus == 'block') {
                    putMessagesReaded();
                }
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGE_SEND_SUCCESSFULLY')}}") {
                appendHtmlMessageClient(payload);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CLIENT_MESSAGES_PUT_AS_READED')}}") {
                window.setTimeout(resetUnreadCounters, 2000);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::SETTINGS_UPDATED')}}") {
                settingsUpdated();
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::SELF_STATUS_UPDATED')}}") {
                selfStatusUpdated(payload);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::JOIN_LEFT_ADMIN_TO_ROOM')}}") {
                onlineAdministrators = parseInt(payload.online_administrators);
                checkChatToAdmin();
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::EMAIL_SENT_SUCCESSFULLY')}}") {
                clearContactForm();
            }
        }
        
        /**
         * Permite mostrar en el historial del chat, un mensaje que acaba de enviar el cliente
         * @param {type} payload
         **/
        function appendHtmlMessageClient(payload) {
            var html = '<li class="right clearfix"><span class="chat-img pull-right">'
                                    +'<img src="http://placehold.it/50/FA6F57/fff&amp;text=ME" alt="User Avatar" class="img-circle">'
                                +'</span>'
                                +'<div class="chat-body clearfix">'
                                    +'<div class="header">'
                                        +'<small class=" text-muted"><span class="glyphicon glyphicon-time"></span>' + payload.msg_date + '</small>'
                                        +'<strong class="pull-right primary-font">' + payload.nickname + '</strong>'
                                    +'</div>'
                                    +'<p>' + payload.msg + '</p>'
                                +'</div>'
                            +'</li>';
            $("#message-list").append(html);
            scrollDown();
        }
        
        /**
         * Permite mostrar en el historial del chat, un mensaje que fue enviado por un administrador
         * @param {type} payload
         **/
        function appendHtmlMessageAdmin(payload) {
            var html = '<li class="left clearfix"><span class="chat-img pull-left">'
                                +'<img src="http://placehold.it/50/55C1E7/fff&amp;text=U" alt="User Avatar" class="img-circle">'
                            +'</span>'
                            +'<div class="chat-body clearfix">'
                                +'<div class="header">'
                                    +'<strong class="primary-font">' + payload.nickname + '</strong> <small class="pull-right text-muted">'
                                        +'<span class="glyphicon glyphicon-time"></span>' + payload.msg_date + '</small>'
                                +'</div>'
                                +'<p>' + payload.msg + '</p>'
                            +'</div>'
                        +'</li>';
            $("#message-list").append(html);
            scrollDown();
        }
        
        /**
         * Permite hacer scroll down en el historial del chat
         **/
        function scrollDown() {
            $("#message-list").scrollTop($("#message-list li:last").position().top - 50 );
        };
        
        /**
         * Permite notificar al servidor que el usuario esta escribiendo un mensaje
         * @param {type} session
         **/
        function notifyTyping(session) {
            var data = {type: "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CLIENT_TYPING')}}"};
            session.publish("chat/channel", data);
        }
        
        /**
         * Permite verificar si el panel de chat esta oculto, para desplegarlo
         */
        function displayChatPanel() {
            var displayStatus = $("#chat").css('display');
            if (displayStatus == 'none') {
                $("#display-chat").trigger('click');
            }
        }
        
        /**
         * Permite actualizar los contadores de mensajes sin leer por el cliente
         */
        function updateUnreadCounters(counter) {
            var spanNotification = $("#display-chat span.chat-notifications-badge");
            var currentNumber = parseInt(spanNotification.html());
            currentNumber += counter;
            spanNotification.html(currentNumber);

            var secondSpanNotification = $(".panel-heading-chat span.badge-success");
            secondSpanNotification.html(currentNumber);

            if (spanNotification.hasClass('is-hidden')) {
                spanNotification.removeClass('is-hidden');
                secondSpanNotification.removeClass('is-hidden');
            }
        }
        
        function resetUnreadCounters() {
            var spanNotification = $("#display-chat span.chat-notifications-badge");
            spanNotification.html('0');
            spanNotification.addClass('is-hidden');
            
            var secondSpanNotification = $(".panel-heading-chat span.badge-success");
            secondSpanNotification.html('0');
            secondSpanNotification.addClass('is-hidden');
        }
        
        /**
         * Permite marcar los mensajes enviados al cliente como leidos
         **/
        function putMessagesReaded() {
            if (globalSession) {
                var data = {type: "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::PUT_MESSAGES_AS_READED')}}"};
                globalSession.publish("{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CHAT_CHANNEL')}}", data);
            }
        }
        
        /**
         * Permite enviar las nuevas configuraciones del chat al servidor 
         * para que sean validadas y almacenadas
         **/
        function saveSettings(session) {
            var data = {type: "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::UPDATE_SETTINGS')}}",
                notificationSound: $("#chatbundle_user_chat_settings_type_notificationSound").val(),
            };
            session.publish("{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CHAT_CHANNEL')}}", data);
            
            $(".save-settings").html('Please wait..');
            $(".save-settings").attr('disabled','disabled');
        }
        
        /**
         * Permite realizar cambios en pantalla una vez almacenadas las 
         * configuraciones del chat
         **/
        function settingsUpdated() {
            $(".save-settings").html('Save Changes');
            $(".save-settings").removeAttr('disabled');
            $(".chat-settings").toggleClass('hidden');
        }
        
        /**
         * Permite solicitar al servidor el cambio de estado del usuario
         */
        function changeStatus(session, newStatus) {
            var data = {type: "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CHANGE_CLIENT_STATUS')}}",
                newStatus: newStatus,
            };
            session.publish("{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CHAT_CHANNEL')}}", data);
        }
        
        /**
         * Permite modificar visualmente el cambio de estado realizado por el admin
         */
        function selfStatusUpdated(payload) {
            $(".panel-heading span.main-status").removeClass(payload.previous_status);
            $(".panel-heading span.main-status").addClass(payload.new_status);
        }
        
        /**
         * Permite realizar cambios en pantalla acorde al numero de administradores online
         */
        function checkChatToAdmin() {
            if (onlineAdministrators > 0) {
                $(".chat-container").removeClass('hidden');
                $(".admin-offline").addClass('hidden');
            } else {
                $(".chat-container").addClass('hidden');
                $(".admin-offline").removeClass('hidden');
            }
        }
        
        /**
         * Permite enviar al servidor el formulario de contacto para enviar
         * un correo al administrador cuando no hay ninguno online
         */
        function sendContactForm(session) {
            
            var email = $("#chatbundle_contact_form_type_email").val();
            var subject = $("#chatbundle_contact_form_type_subject").val();
            var message = $("#chatbundle_contact_form_type_message").val();
            
            if (email != '') {
                if (subject != '') {
                    if (message != '') {
                        
                        $(".send-contact-form").attr('disabled','disabled');
                        $(".send-contact-form").html('Please wait..');
                        
                        var data = {type: "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::EMAIL_CLIENT_TO_ADMIN')}}",
                            email: email,
                            subject: subject,
                            message: message
                        };
                        session.publish("{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CHAT_CHANNEL')}}", data);
                    } else {
                        $("#chatbundle_contact_form_type_message").focus();
                    }
                } else {
                    $("#chatbundle_contact_form_type_subject").focus();
                }
            } else {
                $("#chatbundle_contact_form_type_email").focus();
            }
        }
        
        /**
         * Permite limpiar el formulario de envio de email al administrador
         **/
        function clearContactForm() {
            $("#chatbundle_contact_form_type_email").val('');
            $("#chatbundle_contact_form_type_subject").val('');
            $("#chatbundle_contact_form_type_message").val('');
            $(".send-contact-form").removeAttr('disabled');
            $(".send-contact-form").html('Send');
            $("#contact-form").addClass('hidden');
            $(".contact-message-notification").removeClass('hidden');
        }
        
    </script>
{% endblock %}

{% block scripts %}
    
    /**
     * Ajax que permite consultar los mensajes que el usuario no ha leido
     **/
    $.ajax({
        type: 'POST',
        url: "{{path('chat_example_client_get_unread_messages')}}",
        dataType: 'json',
        data: {nickname: "{{nickname}}", userId: "{{userId}}"},
        success: function (resp)
        {
            if (resp.result == '__OK__') {
                var messages = JSON.parse(resp.messages)
                if (messages.length > 0) {
                    updateUnreadCounters(messages.length);
                }

                for (var i = 0; i < messages.length; i++) {
                    appendHtmlMessageAdmin(messages[i]);
                }
            }
        },
        error: function (resp)
        {
            console.log("Error cargando los mensajes sin leer")
        }
    });
{% endblock %}