{% extends 'ChatBundle:Default:mainClient.html.twig' %}
{% block title %}{{'global.chat'|trans}}{% endblock %}
{% block content %}

    {% if local is defined and local == true %}
        <div class="main-content">
            <div class="row">
                <!-- Raw Links -->
                <div class="col-md-6 pull-right">
                    <ul class="list-inline links-list ">
                        <li>
                            <a class="display-chat" href="#" data-toggle="chat" data-animate="1" data-collapse-sidebar="1">
                                <i class="entypo-chat"></i>
                                {{'global.chat'|trans}}
                                <span class="badge badge-success chat-notifications-badge hidden">0</span>
                            </a>
                        </li>
                    </ul>
                    <span id="container-notification"></span>
                </div>
            </div>
            <hr />
            <div class="col-lg-12" style="height: 400px; min-height: 400px;">    
            </div>
        </div>
    {% endif %}

    <div id="chat" class="fixed">
        <div class="chat-inner">
            <div class="panel panel-primary" style="margin: 8px;">
                <div class="panel-heading panel-heading-chat" style="height: auto;">
                    <span class="main-status user-status {{userSettings.status}}"></span>
                    <span class="glyphicon glyphicon-comment"></span>
                    {{'global.chat'|trans}} <span class="badge badge-success hidden">0</span>

                    <span class="typing-text hidden"></span>
                    <div class="btn-group pull-right">
                        <button data-toggle="dropdown" class="btn btn-default btn-xs dropdown-toggle" type="button">
                            <span class="glyphicon glyphicon-chevron-down"></span>
                        </button>
                        <ul class="dropdown-menu slidedown">
                            <li>
                                <a href="javascript:window.location.reload();"><span class="glyphicon glyphicon-refresh"></span>{{'global.refresh'|trans}}</a>
                            </li>
                            <li>
                                <a href="javascript:void(0);" class="change-status" status="{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::STATUS_ONLINE')}}"><span class="glyphicon glyphicon-ok-sign"></span>{{'global.online'|trans}}</a>
                            </li>
                            <li>
                                <a href="javascript:void(0);" class="change-status" status="{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::STATUS_BUSY')}}"><span class="glyphicon glyphicon-remove"></span>{{'global.busy'|trans}}</a>
                            </li>
                            <li>
                                <a href="javascript:void(0);" class="change-status" status="{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::STATUS_IDLE')}}"><span class="glyphicon glyphicon-time"></span>{{'global.away'|trans}}</a>
                            </li>
                            <li>
                                <a href="javascript:void(0);" class="change-status" status="{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::STATUS_OFFLINE')}}"><span class="glyphicon glyphicon-off"></span>{{'global.offline'|trans}}</a>
                            </li>
                            <li class="divider"></li>
                            <li>
                                <a href="javascript:void(0);" class="display-settings"><span class="glyphicon glyphicon-cog"></span>{{'admin_settings.settings'|trans}}</a>
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="row chat-settings col-lg-12 hidden">
                    <a><i class="entypo-cog"></i> {{'admin_settings.settings'|trans}}</a>
                    <i class="entypo-cancel display-settings pull-right"></i><br>
                    <div class="form-group margin-top">
                        <div class="col-xs-9 no-padding-left">
                            {{ form_label(userSettingsForm.notificationSound)}}
                            {{ form_widget(userSettingsForm.notificationSound,{'attr':{'class':'form-control'}})}}
                        </div>
                        <div class="col-xs-3" style="padding: 24px 0px 0px 0px;">
                            <a class="btn btn-sm play-sound"><i class="entypo-play"></i> {{'global.play'|trans}}</a>
                        </div>
                    </div>
                    <div class="form-group col-xs-12 flt-left margin-top no-padding">
                        <button class="btn btn-primary pull-right save-settings">{{'global.save_changes'|trans}}</button>
                    </div>
                    <div class="hidden">
                        {% set sounds = { 0 : 'sounds-capisci.mp3',
                                              1 : 'sounds-come-to-daddy.mp3', 
                                              2 : 'sounds-communication-channel.mp3',
                                              3 : 'sounds-credulous.mp3', 
                                              4 : 'sounds-et-voila.mp3', 
                                              5 : 'sounds-gets-in-the-way.mp3', 
                                              6 : 'sounds-isnt-it.mp3',
                                              7 : 'sounds-no-way.mp3',
                                              8 : 'sounds-obey.mp3',
                                              9 : 'sounds-pedantic.mp3',
                                              10 : 'sounds-served.mp3',
                                              11 : 'sounds-surprise-on-a-spring.mp3',
                                              12 : 'sounds-worthwhile.mp3',
                                              13 : 'sounds-you-know.mp3',
                                              14 : 'sounds-your-turn.mp3',
                                                } %}
                        {% for sound in sounds %}
                            <audio controls id="{{sound}}">
                                <source src="{{asset('bundles/chat/sounds/'~sound)}}" type="audio/mpeg">
                            </audio>
                        {% endfor %}
                    </div>
                </div>
                <div class="connection-container hidden flt-left">
                    <form onsubmit="return false;" id="connection-form">
                        <div class="col-xs-12 flt-left">
                            <h3>{{'connection_form.title'|trans}}</h3>
                            <p>{{'connection_form.message'|trans}}</p>
                        </div>

                        <div class="col-xs-12 margin-top flt-left">
                            {{ form_label(connectionForm.email) }}
                            {{ form_widget(connectionForm.email,{'attr':{'class':'form-control'}}) }}
                        </div>
                        <div class="col-xs-12 margin-top flt-left">
                            {{ form_label(connectionForm.nickname) }}
                            {{ form_widget(connectionForm.nickname,{'attr':{'class':'form-control lower-case'}}) }}
                        </div>
                        <div class="col-xs-12 margin-top flt-left margin-bottom">
                            <p class="alert alert-danger hidden"></p>
                            <button class="btn btn-primary btn-sm pull-right send-connection-form">{{'global.send'|trans}}</button>
                        </div>
                    </form>
                </div>
                <div class="chat-container hidden">
                    <div class="panel-body ">
                        <ul class="chat" id="message-list">
                        </ul>
                    </div>
                    <div class="panel-footer">
                        <div class="input-group">
                            <input id="input-message" type="text" class="form-control input-sm" placeholder="{{'global.type_your_message'|trans}}">
                            <span class="input-group-btn">
                                <button class="btn btn-primary btn-sm send-message" id="btn-chat">
                                    {{'global.send'|trans}}</button>
                            </span>
                        </div>
                    </div>
                </div>
   
                <div class="admin-offline ">
                    <div class="panel-body">
                        <form onsubmit="return false;" id="contact-form">
                            
                            <div class="col-xs-12 admin-offline-message hidden">
                                <h3>{{'client_email.support_offline'|trans}}</h3>
                                <p>{{'client_email.no_admin_online'|trans}}</p>
                            </div>
                            
                            <div class="col-xs-12 server-down-message ">
                                <h3>{{'client_email.server_offline'|trans}}</h3>
                                <p>{{'client_email.server_offline_message'|trans}}</p>
                            </div>
                            
                            <div class="col-xs-12 margin-top flt-left">
                                {{ form_label(contactForm.email) }}
                                {{ form_widget(contactForm.email,{'attr':{'class':'form-control'}}) }}
                            </div>
                            <div class="col-xs-12 margin-top flt-left">
                                {{ form_label(contactForm.subject) }}
                                {{ form_widget(contactForm.subject,{'attr':{'class':'form-control'}}) }}
                            </div>
                            <div class="col-xs-12 margin-top flt-left">
                                {{ form_label(contactForm.message) }}
                                {{ form_widget(contactForm.message,{'attr':{'class':'form-control'}}) }}
                            </div>
                            <div class="col-xs-12 margin-top flt-left margin-bottom">
                                <p class="offline-message-alert"></p>
                                <button class="btn btn-primary btn-sm pull-right send-contact-form">{{'global.send'|trans}}</button>
                            </div>
                        </form>
                        <div class="col-xs-12 margin-top flt-left contact-message-notification hidden">
                            <div class="alert alert-success">{{'client_email.message_send'|trans}}</div>
                            <div class="col-xs-6 flt-left">
                                <a class="btn btn-primary btn-sm send-other-message">{{'client_email.send_other_message'|trans}}</a>
                            </div>
                            <div class="col-xs-6 flt-left">
                                <a class="btn btn-danger btn-sm pull-right display-chat" data-toggle="chat" data-animate="1" data-collapse-sidebar="1">{{'global.close'|trans}}</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block other_scripts %}
    {{ ws_client() }}

    <script type="text/javascript">
        var _WS_URI = "ws://{{ gos_web_socket_server_host }}:{{ gos_web_socket_server_port }}";

        var webSocket = WS.connect(_WS_URI);

        var globalSession = null;

        var onlineAdministrators = [];
        
        var connectionSuccesfully = false;
        
        var userIdentifier = '';
        var userNickname = '';
        var userEmail = '';
        
        var lastAdminId = '';
        
        /**
         * Cuando el cliente entra al chat, los primeros mensajes que envia (antes de que un administrador le responda)
         * son enviados a todos los administradores, cuando un admin responde, los mensajes seran solo 
         * enviados a dicho administrador
         * @type String
         */
        var destination = "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGE_ALL_ADMINISTRATORS')}}";
        
        {% if nickname is defined and nickname is not empty %}
            userNickname = "{{nickname}}";
        {% endif %}
            
        {% if userId is defined and userId is not empty %}
            userIdentifier = "{{userId}}";
        {% endif %}
            
        {% if email is defined and email is not empty %}
            userEmail = "{{email}}";
        {% endif %}
        
        webSocket.on("socket/connect", function (session) {
            bindUI(session);
            console.log("Successfully Connected!");
            updateConnectionData(session)
            joinChatRoom(session);
            notifyServerUp();
        });

        webSocket.on("socket/disconnect", function (error) {
            console.log("Disconnected for " + error.reason + " with code " + error.code);
            unbindUI();
            onlineAdministrators = [];
            notifyServerDown();
        });


        /**
         * Permite actualizar la informacion de la conexion del usuario
         * @param {type} session
         */
        function updateConnectionData(session)
        {
            session.call("rpc/update_connection_data", {"nickname": userNickname, "user_id": userIdentifier, "user_type": "{{userType}}", "email": userEmail }).then(
                    function (result)
                    {
                        console.log("RPC Valid!", result);
                    },
                    function (error, desc)
                    {
                        console.log("RPC Error", error, desc);
                    }
            );
        }

        /**
         * Permite habilitar los eventos sobre los elementos de la ventana, cuando hay conexion
         * @param {type} session
         */
        function bindUI(session) {
            globalSession = session;
            $("#input-message").bind("keydown", function (e) {
                var key;
                if (window.event) {
                    key = window.event.keyCode;   /*IE*/
                } else {
                    key = e.which;                /*firefox*/
                }
                if (key == 13) {
                    sendMessage(session);
                } else {
                    notifyTyping(session);
                }
            });

            $(".send-message").bind("click", function (e) {
                sendMessage(session);
            });

            $(".display-chat").bind("click", function (e) {
                putMessagesReaded();
            });

            $(".display-settings").bind("click", function (e) {
                $(".chat-settings").toggleClass('hidden');
            });

            $("#chatbundle_user_chat_settings_type_notificationSound").bind("change", function (e) {
                document.getElementById($(this).val()).play();
            });

            $(".play-sound").bind("click", function (e) {
                var soundF = $("#chatbundle_user_chat_settings_type_notificationSound").val();
                if (soundF == null || soundF == '') {
                    soundF = "{{constant('Kijho\\ChatBundle\\Entity\\UserChatSettings::DEFAULT_SOUND')}}";
                    $("#chatbundle_user_chat_settings_type_notificationSound").val(soundF);
                }
                if (soundF != null && soundF != '' && soundF != "sound") {
                    document.getElementById(soundF).play();
                }
            });

            $(".save-settings").bind("click", function (e) {
                saveSettings(session);
            });

            $(".change-status").bind("click", function (e) {
                var newStatus = $(this).attr('status');
                changeStatus(session, newStatus);
            });
            
            $(".send-connection-form").bind("click", function (e) {
                sendConnectionForm(session);
            });
        }

        /**
         * Permite deshabilitar los eventos sobre los botones, cuando se pierde la conexion
         */
        function unbindUI() {
            globalSession = null;
            $(".send-message").unbind();
            $("#input-message").unbind();
            $(".display-settings").unbind();
            $("#chatbundle_user_chat_settings_type_notificationSound").unbind();
            $(".play-sound").unbind();
            $(".save-settings").unbind();
            $(".change-status").unbind();
        }

        /**
         * Permite realizar la conexion a una sala en especifico, y establecer un escucha de eventos
         * @param {type} session
         */
        function joinChatRoom(session) {
            //the callback function in "subscribe" is called everytime an event is published in that channel.
            session.subscribe("chat/channel", serverEvent);
        }

        /**
         * Permite el envio de un mensaje a un usuario en especifico
         * @param {type} session
         */
        function sendMessage(session) {
            var message = $("#input-message").val();
            if (message != '') {
                var data = {type: "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGE_TO_ADMIN')}}",
                    message: message,
                    destination: destination,
                };
                session.publish("chat/channel", data);
                $("#input-message").val('');
            }
            $("#input-message").focus();
        }

        /**
         * Funcion que escucha los eventos del servidor para efectuar acciones en pantalla
         * @param {type} uri
         * @param {type} payload
         **/
        function serverEvent(uri, payload) {
            
            if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::SERVER_WELCOME_MESSAGE')}}") {
                connectionSuccess(payload);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::NICKNAME_REQUIRED')}}"){
                connectionSuccesfully = false;
                $(".connection-container").removeClass('hidden');
                $(".chat-container").addClass('hidden');
                $(".admin-offline").addClass('hidden');
                checkExistingConecction();
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGE_FROM_ADMIN')}}") {
                destination = payload.user_id;
                lastAdminId = payload.user_id;
                $(".play-sound").trigger('click');
                appendHtmlMessageAdmin(payload);
                //displayChatPanel();
                updateUnreadCounters(1);
                var displayStatus = $("#chat").css('display');
                if (displayStatus == 'block') {
                    putMessagesReaded();
                }
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGE_SEND_SUCCESSFULLY')}}") {
                appendHtmlMessageClient(payload);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CLIENT_MESSAGES_PUT_AS_READED')}}") {
                window.setTimeout(resetUnreadCounters, 2000);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::SETTINGS_UPDATED')}}") {
                settingsUpdated();
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::SELF_STATUS_UPDATED')}}") {
                selfStatusUpdated(payload);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::JOIN_LEFT_ADMIN_TO_ROOM')}}") {
                onlineAdministrators = payload.online_administrators;
                checkChatToAdmin();
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::ADMIN_TYPING')}}") {
                adminTyping(payload);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CLIENT_AUTOMATIC_MESSAGE')}}") {
                displayAutomaticMessage(payload);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::WRONG_CONNECTION_DATA')}}") {
                wrongConnectionData(payload);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::NICKNAME_REPEATED')}}") {
                wrongConnectionData(payload);
            }
        }

        /**
         * Permite mostrar en el historial del chat, un mensaje que acaba de enviar el cliente
         * @param {type} payload
         **/
        function appendHtmlMessageClient(payload) {
            var html = '<li class="right clearfix"><span class="chat-img pull-right">'
                    + '<img src="http://placehold.it/50/FA6F57/fff&amp;text=ME" alt="User Avatar" class="img-circle">'
                    + '</span>'
                    + '<div class="chat-body clearfix">'
                    + '<div class="header">'
                    + '<small class=" text-muted"><span class="glyphicon glyphicon-time"></span>' + payload.msg_date + '</small>'
                    + '<strong class="pull-right primary-font">' + payload.nickname + '</strong>'
                    + '</div>'
                    + '<p>' + payload.msg + '</p>'
                    + '</div>'
                    + '</li>';
            $("#message-list").append(html);
            scrollDown();
        }

        /**
         * Permite mostrar en el historial del chat, un mensaje que fue enviado por un administrador
         * @param {type} payload
         **/
        function appendHtmlMessageAdmin(payload) {
            var html = '<li class="left clearfix"><span class="chat-img pull-left">'
                    + '<img src="http://placehold.it/50/55C1E7/fff&amp;text=U" alt="User Avatar" class="img-circle">'
                    + '</span>'
                    + '<div class="chat-body clearfix">'
                    + '<div class="header">'
                    + '<strong class="primary-font">' + payload.nickname + '</strong> <small class="pull-right text-muted">'
                    + '<span class="glyphicon glyphicon-time"></span>' + payload.msg_date + '</small>'
                    + '</div>'
                    + '<p>' + payload.msg + '</p>'
                    + '</div>'
                    + '</li>';
            $("#message-list").append(html);
            scrollDown();
        }

        /**
         * Permite hacer scroll down en el historial del chat
         **/
        function scrollDown() {
            var countLi = $('ul#message-list li').length;
            if (countLi > 0) {
                var scroll =  Math.abs($('ul#message-list li:first').offset().top);
                var scrollDown = Math.abs($('ul#message-list li:last').offset().top);
                $("#message-list").scrollTop(scroll+scrollDown);
            }
        }

        /**
         * Permite notificar al servidor que el usuario esta escribiendo un mensaje
         * @param {type} session
         **/
        function notifyTyping(session) {
            var data = {type: "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CLIENT_TYPING')}}"};
            session.publish("chat/channel", data);
        }

        /**
         * Permite verificar si el panel de chat esta oculto, para desplegarlo
         */
        function displayChatPanel() {
            var displayStatus = $("#chat").css('display');
            if (displayStatus == 'none') {
                $(".display-chat").trigger('click');
            }
        }

        /**
         * Permite actualizar los contadores de mensajes sin leer por el cliente
         */
        function updateUnreadCounters(counter) {
            var spanNotification = $(".display-chat span.chat-notifications-badge");
            var currentNumber = parseInt(spanNotification.html());
            currentNumber += counter;
            spanNotification.html(currentNumber);

            var secondSpanNotification = $(".panel-heading-chat span.badge-success");
            secondSpanNotification.html(currentNumber);

            if (spanNotification.hasClass('hidden')) {
                spanNotification.removeClass('hidden');
                secondSpanNotification.removeClass('hidden');
            }
        }

        function resetUnreadCounters() {
            var spanNotification = $(".display-chat span.chat-notifications-badge");
            spanNotification.html('0');
            spanNotification.addClass('hidden');

            var secondSpanNotification = $(".panel-heading-chat span.badge-success");
            secondSpanNotification.html('0');
            secondSpanNotification.addClass('hidden');
        }

        /**
         * Permite marcar los mensajes enviados al cliente como leidos
         **/
        function putMessagesReaded() {
            var displayStatus = $("#chat").css('display');
            if (displayStatus == 'none') {
                $("#input-message").focus();
            }
            if (globalSession) {
                var data = {type: "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::PUT_MESSAGES_AS_READED')}}"};
                globalSession.publish("{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CHAT_CHANNEL')}}", data);
            }
        }

        /**
         * Permite enviar las nuevas configuraciones del chat al servidor 
         * para que sean validadas y almacenadas
         **/
        function saveSettings(session) {
            var data = {type: "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::UPDATE_SETTINGS')}}",
                notificationSound: $("#chatbundle_user_chat_settings_type_notificationSound").val(),
            };
            session.publish("{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CHAT_CHANNEL')}}", data);

            $(".save-settings").html("{{'global.please_wait'|trans}}");
            $(".save-settings").attr('disabled', 'disabled');
        }

        /**
         * Permite realizar cambios en pantalla una vez almacenadas las 
         * configuraciones del chat
         **/
        function settingsUpdated() {
            $(".save-settings").html("{{'global.save_changes'|trans}}");
            $(".save-settings").removeAttr('disabled');
            $(".chat-settings").toggleClass('hidden');
        }

        /**
         * Permite solicitar al servidor el cambio de estado del usuario
         */
        function changeStatus(session, newStatus) {
            var data = {type: "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CHANGE_CLIENT_STATUS')}}",
                newStatus: newStatus,
            };
            session.publish("{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CHAT_CHANNEL')}}", data);
        }

        /**
         * Permite modificar visualmente el cambio de estado realizado por el admin
         */
        function selfStatusUpdated(payload) {
            console.log('se cambio el estado');
            $(".panel-heading span.main-status").removeClass(payload.previous_status);
            $(".panel-heading span.main-status").addClass(payload.new_status);
        }

        /**
         * Permite realizar cambios en pantalla acorde al numero de administradores online
         */
        function checkChatToAdmin() {
            if (connectionSuccesfully) {
                if (onlineAdministrators.length > 0) {
                    $(".chat-container").removeClass('hidden');
                    $(".admin-offline").addClass('hidden');
                    
                    //hacemos esta logica para que el cliente siga la conversacion con
                    //el ultimo administrador con quin ha conversado
                    for (var i = 0; i < onlineAdministrators.length; i++) {
                        if (onlineAdministrators[i].user_id == lastAdminId
                                && lastAdminId != destination) {
                            destination = lastAdminId;
                            break;
                        }
                    }
                } else {
                    $(".chat-container").addClass('hidden');
                    $(".admin-offline").removeClass('hidden');
                }
            }
            
        }

        /**
         * Permite limpiar el formulario de envio de email al administrador
         **/
        function clearContactForm(payload) {
            $("#chatbundle_contact_form_type_email").val('');
            $("#chatbundle_contact_form_type_subject").val('');
            $("#chatbundle_contact_form_type_message").val('');
            $(".send-contact-form").removeAttr('disabled');
            $(".send-contact-form").html("{{'global.send'|trans}}");
            $("#contact-form").addClass('hidden');
            $(".contact-message-notification").removeClass('hidden');
            $(".contact-message-notification div.alert-success").html(payload.msg);
            $(".offline-message-alert").html('');
        }
        
        /**
         * Permite mostrar en pantalla que un administrador esta escribiendo
         **/
        function adminTyping(payload) {
            $(".typing-text").html(payload.msg);
            $(".typing-text").removeClass('hidden');
            window.setTimeout(hideTyping, 2000);
        }

        /**
         * Permite ocultar el mensaje que indica que un administrador esta escribiendo
         **/
        function hideTyping() {
            var object = $(".typing-text");
            if (!object.hasClass('hidden')) {
                object.addClass('hidden');
            }
        }
        
        function displayAutomaticMessage(payload) {
            $(".play-sound").trigger('click');
            appendHtmlMessageAdmin(payload);
            updateUnreadCounters(1);
            var displayStatus = $("#chat").css('display');
            if (displayStatus == 'block') {
                putMessagesReaded();
            }
        }
        
        /**
         * Permite realizar cambios en pantalla cuendo el servidor esta fuera de linea
         */
        function notifyServerDown() {
            $(".chat-container").addClass('hidden');
            $(".connection-container").addClass('hidden');
            $(".admin-offline").removeClass('hidden');
            $(".admin-offline-message").addClass('hidden');
            $(".server-down-message").removeClass('hidden');
        }
        
        /**
         * Permite realizar cambios en pantalla cuendo el servidor esta en linea
         */
        function notifyServerUp() {
            $(".chat-container").removeClass('hidden');
            $(".admin-offline").addClass('hidden');
            $(".admin-offline-message").removeClass('hidden');
            $(".server-down-message").addClass('hidden');
        }
        
        function sendConnectionForm(session) {
            var email = $("#chatbundle_connection_form_type_email").val();
            var nickname = $("#chatbundle_connection_form_type_nickname").val();

            if (email != '' && validateEmail(email)) {
                if (nickname != '' && validateNickname(nickname)) {
                        $(".send-connection-form").attr('disabled', 'disabled');
                        $(".send-connection-form").html("{{'global.please_wait'|trans}}");

                        var data = {type: "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CONNECT_TO_CHAT')}}",
                            email: email,
                            nickname: nickname,
                        };
                        session.publish("{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CHAT_CHANNEL')}}", data);
                } else {
                    $(".connection-container p.alert-danger").removeClass('hidden');
                    $(".connection-container p.alert-danger").html("{{'connection_form.insert_valid_nickname'|trans}}");
                    $("#chatbundle_connection_form_type_nickname").select();
                }
            } else {
                $(".connection-container p.alert-danger").removeClass('hidden');
                $(".connection-container p.alert-danger").html("{{'connection_form.insert_valid_email'|trans}}");
                $("#chatbundle_connection_form_type_email").select();
            }
        }
        
        /**
         * Permte realizar cambios en pantalla una vez realizada la conexion de un usuario
         **/
        function connectionSuccess(payload) {
            connectionSuccesfully = true;
            $(".connection-container p.alert-danger").addClass('hidden');
            if (payload.msg != '') {
                if (!$("#message-list li:first").hasClass('welcome')) {
                    $("#message-list").prepend('<li class="welcome">' + payload.msg + '</li>');
                }
            }
            $(".connection-container").addClass('hidden');
            $(".chat-container").removeClass('hidden');
            $(".send-connection-form").removeAttr('disabled');
            $(".send-connection-form").html("{{'global.send'|trans}}");
            
            if (payload.anonymous != '' && payload.anonymous != 'undefined' && payload.anonymous == true) {
                console.log(payload);
                document.cookie="__nickname="+payload.nickname;
                document.cookie="__email="+payload.email;
                userIdentifier = payload.nickname;
                userNickname = payload.nickname;
                userEmail = payload.email;
                $(".panel-heading span.main-status").addClass(payload.status);
                $(".panel-heading span.main-status").removeClass('is-offline');
                if (payload.sound != '') {
                    $("#chatbundle_user_chat_settings_type_notificationSound").val(payload.sound);
                }
                if (userIdentifier != '') {
                    getClientMessages(userNickname, userIdentifier);
                }
            }
        }
        
        /**
         * Permte realizar cambios en pantalla cuando el usuario ingresa datos 
         * invalidos cuando realiza una conexion
         **/
        function wrongConnectionData(payload) {
            $("#chatbundle_connection_form_type_nickname").focus();
            $(".send-connection-form").removeAttr('disabled');
            $(".send-connection-form").html("{{'global.send'|trans}}");
            $(".connection-container p.alert-success").addClass('hidden');
            $(".connection-container p.alert-danger").removeClass('hidden');
            $(".connection-container p.alert-danger").html(payload.msg);
        }
        
        function checkExistingConecction() {
            var previousEmail = getCookie('__email');
            var previousNickname = getCookie('__nickname');
            
            if (previousEmail != '' && previousEmail != 'undefined' && previousNickname != '' && previousNickname != 'undefined' ) {
                $("#chatbundle_connection_form_type_email").val(previousEmail);
                $("#chatbundle_connection_form_type_nickname").val(previousNickname);
                $(".send-connection-form").trigger('click');
            }
        }
        
        function getCookie(cname) {
            var name = cname + "=";
            var ca = document.cookie.split(';');
            for(var i=0; i<ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0)==' ') c = c.substring(1);
                if (c.indexOf(name) == 0) return c.substring(name.length,c.length);
            }
            return "";
        } 
        
        /**
        * Ajax que permite consultar los mensajes del usuario
        **/
        function getClientMessages(nickname, userId) {
            $.ajax({
                type: 'POST',
                url: "{{path('chat_example_client_get_messages')}}",
                dataType: 'json',
                async: false,
                data: {nickname: nickname, userId: userId},
                success: function (resp)
                {
                    if (resp.result == '__OK__') {
                        if (resp.unreadCounter > 0) {
                            updateUnreadCounters(resp.unreadCounter);
                        }

                        var messages = JSON.parse(resp.messages)
                        for (var i = 0; i < messages.length; i++) {
                            if (messages[i].type == "{{constant('Kijho\\ChatBundle\\Entity\\Message::TYPE_CLIENT_TO_ADMIN')}}") {
                                appendHtmlMessageClient(messages[i]);
                                lastAdminId = messages[i].destination_id;
                            } else if (messages[i].type == "{{constant('Kijho\\ChatBundle\\Entity\\Message::TYPE_ADMIN_TO_CLIENT')}}") {
                                appendHtmlMessageAdmin(messages[i]);
                                lastAdminId = messages[i].sender_id;
                            }
                        }
                        scrollDown();
                    }
                },
                error: function (resp)
                {
                    console.log("Error cargando los mensajes del cliente")
                }
            });
        }
        
        function validateEmail(email) {
            var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            return re.test(email);
        }
        
        function validateNickname(nickname) {
            var re = /^[a-z0-9_-]{3,15}$/;
            return re.test(nickname);
        }
    </script>
{% endblock %}

{% block scripts %}
    
    {% if nickname is defined and nickname is not empty %}
        getClientMessages("{{nickname}}", "{{userId}}");
        scrollDown();
    {% endif %}
    
    $(".send-other-message").click(function (e) {
        $(".contact-message-notification").addClass('hidden');
        $("#contact-form").removeClass('hidden');
    });

    $('.lower-case').keyup(function () {
        var text = $(this).val();
        text = text.toLowerCase();
        $(this).val(text);
    });
    
    /**
    * Permite enviar al servidor el formulario de contacto para enviar
    * un correo al administrador cuando no hay ninguno online
    */
    $(".send-contact-form").click(function (e) {
        e.preventDefault();
        var email = $("#chatbundle_contact_form_type_email").val();
        var subject = $("#chatbundle_contact_form_type_subject").val();
        var message = $("#chatbundle_contact_form_type_message").val();

        if (email != '' && validateEmail(email)) {
            if (subject != '') {
                if (message != '') {

                    $(".send-contact-form").attr('disabled', 'disabled');
                    $(".send-contact-form").html("{{'global.please_wait'|trans}}");

                    var data = {
                        email: email,
                        subject: subject,
                        message: message,
                        userId: userIdentifier,
                        nickname: userNickname
                    };
                    
                    $.ajax({
                        type: 'POST',
                        url: "{{path('chat_example_client_send_offline_message')}}",
                        dataType: 'json',
                        data: data,
                        success: function (resp)
                        {
                            if (resp.result == '__OK__') {
                                clearContactForm(resp);
                            } else {
                                $(".send-contact-form").removeAttr('disabled');
                                $(".send-contact-form").html("{{'global.send'|trans}}");
                                $(".offline-message-alert").html(resp.msg);
                            }
                        },
                        error: function (resp)
                        {
                            $(".send-contact-form").removeAttr('disabled');
                            $(".send-contact-form").html("{{'global.send'|trans}}");
                            console.log("Error enviando correo electronico")
                        }
                    });
                } else {
                    $("#chatbundle_contact_form_type_message").focus();
                }
            } else {
                $("#chatbundle_contact_form_type_subject").focus();
            }
        } else {
            $("#chatbundle_contact_form_type_email").select();
        }
    });
{% endblock %}