{% extends 'ChatBundle:Default:mainClient.html.twig' %}
{% block title %}Chat Bundle{% endblock %}
{% block content %}
    
        {% if local is defined and local == true %}
            <div class="main-content">
                <div class="row">
                    <!-- Raw Links -->
                    <div class="col-md-6 pull-right">
                        <ul class="list-inline links-list ">
                            <li>
                                <a id="display-chat" href="#" data-toggle="chat" data-animate="1" data-collapse-sidebar="1">
                                    <i class="entypo-chat"></i>
                                    Chat
                                    <span class="badge badge-success chat-notifications-badge is-hidden">0</span>
                                </a>
                            </li>
                        </ul>
                        <span id="container-notification"></span>
                    </div>
                </div>
                <hr />
                <div class="col-lg-12" style="height: 400px; min-height: 400px;">    
                </div>
            </div>
        {% endif %}
    
        <div id="chat" class="fixed">
            <div class="chat-inner">
                <div class="panel panel-primary" style="margin: 8px;">
                    <div class="panel-heading">
                        <span class="glyphicon glyphicon-comment"></span>
                        Chat <span class="badge badge-success is-hidden">0</span>
                        <div class="btn-group pull-right">
                            <button data-toggle="dropdown" class="btn btn-default btn-xs dropdown-toggle" type="button">
                                <span class="glyphicon glyphicon-chevron-down"></span>
                            </button>
                            <ul class="dropdown-menu slidedown">
                                <li>
                                    <a href="#"><span class="glyphicon glyphicon-refresh"></span>Refresh</a>
                                </li>
                                <li>
                                    <a href="#"><span class="glyphicon glyphicon-ok-sign"></span>Available</a>
                                </li>
                                <li>
                                    <a href="#"><span class="glyphicon glyphicon-remove"></span>Busy</a>
                                </li>
                                <li>
                                    <a href="#"><span class="glyphicon glyphicon-time"></span>Away</a>
                                </li>
                                <li class="divider"></li>
                                <li>
                                    <a href="#"><span class="glyphicon glyphicon-off"></span>Sign Out</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                    <div class="panel-body">
                        <ul class="chat" id="message-list">
                        </ul>
                    </div>
                    <div class="panel-footer">
                        <div class="input-group">
                            <input id="input-message" type="text" class="form-control input-sm" placeholder="Type your message here...">
                            <span class="input-group-btn">
                                <button class="btn btn-primary btn-sm send-message" id="btn-chat">
                                    Send</button>
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
{% endblock %}

{% block other_scripts %}
    {{ ws_client() }}

    <script type="text/javascript">
        var _WS_URI = "ws://{{ gos_web_socket_server_host }}:{{ gos_web_socket_server_port }}";

        var webSocket = WS.connect(_WS_URI);

        webSocket.on("socket/connect", function (session) {
            bindUI(session);
            console.log("Successfully Connected!");
            updateConnectionData(session)
            joinChatRoom(session);
        });

        webSocket.on("socket/disconnect", function (error) {
            console.log("Disconnected for " + error.reason + " with code " + error.code);
            unbindUI();
        });

        
        /**
         * Permite actualizar la informacion de la conexion del usuario
         * @param {type} session
         */
        function updateConnectionData(session)
        {
            session.call("rpc/update_connection_data", {"nickname": "{{nickname}}", "user_id": "{{userId}}", "user_type": "{{userType}}"}).then(
                    function (result)
                    {
                        console.log("RPC Valid!", result);
                    },
                    function (error, desc)
                    {
                        console.log("RPC Error", error, desc);
                    }
            );
        }

        /**
         * Permite habilitar los eventos sobre los elementos de la ventana, cuando hay conexion
         * @param {type} session
         */
        function bindUI(session) {

            $("#input-message").bind("keydown", function (e) {
                var key;
                if (window.event) {
                    key = window.event.keyCode;   /*IE*/
                } else {
                    key = e.which;                /*firefox*/
                }
                if (key == 13) {
                    sendMessage(session);
                } else {
                    notifyTyping(session);
                }
            });

            $(".send-message").bind("click", function (e) {
                sendMessage(session);
            });
        }

        /**
         * Permite deshabilitar los eventos sobre los botones, cuando se pierde la conexion
         */
        function unbindUI() {
            $(".send-message").unbind();
            $("#input-message").unbind();
        }

        /**
         * Permite realizar la conexion a una sala en especifico, y establecer un escucha de eventos
         * @param {type} session
         */
        function joinChatRoom(session) {
            //the callback function in "subscribe" is called everytime an event is published in that channel.
            session.subscribe("chat/channel", serverEvent);
        }

        /**
         * Cuando el cliente entra al chat, los primeros mensajes que envia (antes de que un administrador le responda)
         * son enviados a todos los administradores, cuando un admin responde, los mensajes seran solo 
         * enviados a dicho administrador
         * @type String
         */
        var destination = "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGE_ALL_ADMINISTRATORS')}}";

        /**
         * Permite el envio de un mensaje a un usuario en especifico
         * @param {type} session
         */
        function sendMessage(session) {
            var message = $("#input-message").val();
            if (message != '') {
                var data = {type: "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGE_TO_ADMIN')}}",
                    message: message,
                    destination: destination,
                };
                session.publish("chat/channel", data);
                $("#input-message").val('');
            }
            $("#input-message").focus();
        }

        /**
         * Funcion que escucha los eventos del servidor para efectuar acciones en pantalla
         * @param {type} uri
         * @param {type} payload
         **/
        function serverEvent(uri, payload) {
            console.log(payload);
            if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::SERVER_WELCOME_MESSAGE')}}") {
                $("#message-list").append('<li>' + payload.msg + '</li>');
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGE_FROM_ADMIN')}}") {
                destination = payload.user_id;
                appendHtmlMessageAdmin(payload)
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGE_SEND_SUCCESSFULLY')}}") {
                appendHtmlMessageClient(payload);
            }
        }
        
        /**
         * Permite mostrar en el historial del chat, un mensaje que acaba de enviar el cliente
         * @param {type} payload
         **/
        function appendHtmlMessageClient(payload) {
            var html = '<li class="right clearfix"><span class="chat-img pull-right">'
                                    +'<img src="http://placehold.it/50/FA6F57/fff&amp;text=ME" alt="User Avatar" class="img-circle">'
                                +'</span>'
                                +'<div class="chat-body clearfix">'
                                    +'<div class="header">'
                                        +'<small class=" text-muted"><span class="glyphicon glyphicon-time"></span>' + payload.msg_date + '</small>'
                                        +'<strong class="pull-right primary-font">' + payload.nickname + '</strong>'
                                    +'</div>'
                                    +'<p>' + payload.msg + '</p>'
                                +'</div>'
                            +'</li>';
            $("#message-list").append(html);
            scrollDown();
        }
        
        /**
         * Permite mostrar en el historial del chat, un mensaje que fue enviado por un administrador
         * @param {type} payload
         **/
        function appendHtmlMessageAdmin(payload) {
            var html = '<li class="left clearfix"><span class="chat-img pull-left">'
                                +'<img src="http://placehold.it/50/55C1E7/fff&amp;text=U" alt="User Avatar" class="img-circle">'
                            +'</span>'
                            +'<div class="chat-body clearfix">'
                                +'<div class="header">'
                                    +'<strong class="primary-font">' + payload.nickname + '</strong> <small class="pull-right text-muted">'
                                        +'<span class="glyphicon glyphicon-time"></span>' + payload.msg_date + '</small>'
                                +'</div>'
                                +'<p>' + payload.msg + '</p>'
                            +'</div>'
                        +'</li>';
            $("#message-list").append(html);
            scrollDown();
        }
        
        /**
         * Permite hacer scroll down en el historial del chat
         **/
        function scrollDown() {
            $("#message-list").scrollTop($("#message-list li:last").position().top - 50 );
        };
        
        /**
         * Permite notificar al servidor que el usuario esta escribiendo un mensaje
         * @param {type} session
         **/
        function notifyTyping(session) {
            var data = {type: "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CLIENT_TYPING')}}"};
            session.publish("chat/channel", data);
        }
        
    </script>
{% endblock %}