{% extends 'ChatBundle:Default:mainAdmin.html.twig' %}
{% block title %}{{'global.chat'|trans}} - {{'admin.administrator'|trans}}{% endblock %}
{% block content %}

    {% if local is defined and local == true %}
        <div class="main-content">
            <div class="row">
                <!-- Raw Links -->
                <div class="col-md-6 pull-right">
                    <ul class="list-inline links-list ">
                        <li>
                            <a class="display-chat" href="#" data-toggle="chat" data-animate="1" data-collapse-sidebar="1">
                                <i class="entypo-chat"></i>
                                {{'global.chat'|trans}}
                                <span class="badge badge-success chat-notifications-badge is-hidden">0</span>
                            </a>
                        </li>
                    </ul>
                    <span id="container-notification"></span>
                </div>
            </div>
            <hr />
            <div class="col-lg-12" style="height: 400px; min-height: 400px;">    
            </div>
        </div>
    {% endif %}

    <div id="chat" class="fixed" data-current-user="{{nickname}}" data-order-by-status="1" data-max-chat-history="25">
        <div class="chat-inner">
            <h2 class="chat-header">
                {#<a href="#" class="chat-close" data-animate="1"><i class="entypo-cancel"></i></a>#}
                <div class="btn-group pull-right">
                    <button type="button" class="btn btn-default btn-xs dropdown-toggle" data-toggle="dropdown">
                        <span class="glyphicon glyphicon-chevron-down"></span>
                    </button>
                    <ul class="dropdown-menu slidedown">
                        <li>
                            <a href="javascript:window.location.reload();"><span class="glyphicon glyphicon-refresh"></span> {{'global.refresh'|trans}}</a>
                        </li>
                        <li>
                            <a href="javascript:void(0);" class="change-status" status="{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::STATUS_ONLINE')}}"><span class="glyphicon glyphicon-ok-sign"></span> {{'global.online'|trans}}</a>
                        </li>
                        <li>
                            <a href="javascript:void(0);" class="change-status" status="{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::STATUS_BUSY')}}"><span class="glyphicon glyphicon-remove"></span> {{'global.busy'|trans}}</a>
                        </li>
                        <li>
                            <a href="javascript:void(0);" class="change-status" status="{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::STATUS_IDLE')}}"><span class="glyphicon glyphicon-time"></span> {{'global.away'|trans}}</a>
                        </li>
                        <li>
                            <a href="javascript:void(0);" class="change-status" status="{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::STATUS_OFFLINE')}}"><span class="glyphicon glyphicon-off"></span> {{'global.offline'|trans}}</a>
                        </li>
                        <li class="divider"></li>
                        <li>
                            <a href="javascript:void(0);" class="display-settings"><span class="glyphicon glyphicon-cog"></span> {{'admin_settings.settings'|trans}}</a>
                        </li>
                    </ul>
                </div>
                
                <span class="main-status user-status {{userSettings.status}}"></span><i class="entypo-users"></i>{{'global.chat'|trans}}<span class="badge badge-success is-hidden">0</span>
            </h2>
                
            <div class="row chat-settings col-lg-12 hidden">
                <a><i class="entypo-cog"></i> {{'admin_settings.settings'|trans}}</a>
                <i class="entypo-cancel display-settings pull-right"></i><br>
                <div class="form-group margin-top">
                    <div class="col-xs-9 no-padding-left">
                        {{ form_label(userSettingsForm.notificationSound)}}
                        {{ form_widget(userSettingsForm.notificationSound,{'attr':{'class':'form-control'}})}}
                    </div>
                    <div class="col-xs-3 no-padding" style="padding-top: 24px;">
                        <a class="btn btn-sm play-sound no-padding"><i class="entypo-play"></i> {{'global.play'|trans}}</a>
                    </div>
                </div>
                <div class="form-group col-xs-12 flt-left margin-top no-padding">
                    {{ form_label(settingsForm.emailOfflineMessages)}}
                    {{ form_widget(settingsForm.emailOfflineMessages,{'attr':{'class':'form-control'}})}}
                </div>
                <div class="form-group col-xs-12 flt-left margin-top no-padding">
                    {{ form_label(settingsForm.automaticMessage)}}
                    {{ form_widget(settingsForm.automaticMessage,{'attr':{'class':'form-control'}})}}
                </div>
                <div class="form-group col-xs-12 flt-left margin-top no-padding">
                    {{ form_label(settingsForm.enableCustomResponses)}}
                    {{ form_widget(settingsForm.enableCustomResponses,{'attr':{'class':''}})}}
                </div>
                <div id="container-custom-messages" class="form-group col-xs-12 flt-left no-padding {% if not chatSettings.enableCustomResponses %} hidden {% endif %}">
                    {% include 'ChatBundle:ChatSettings:customMessages.html.twig' %}
                </div>
                <div class="form-group col-xs-12 flt-left no-padding">
                    <a class="btn btn-primary btn-sm no-padding add-custom-message {% if not chatSettings.enableCustomResponses %} hidden {% endif %}"><i class="entypo-plus"></i></a>
                </div>
                <div class="form-group col-xs-12 flt-left no-padding">
                    <button class="btn btn-primary pull-right save-settings">{{'global.save_changes'|trans}}</button>
                </div>
                <div class="hidden">
                    {% set sounds = { 0 : 'sounds-capisci.mp3',
                                      1 : 'sounds-come-to-daddy.mp3', 
                                      2 : 'sounds-communication-channel.mp3',
                                      3 : 'sounds-credulous.mp3', 
                                      4 : 'sounds-et-voila.mp3', 
                                      5 : 'sounds-gets-in-the-way.mp3', 
                                      6 : 'sounds-isnt-it.mp3',
                                      7 : 'sounds-no-way.mp3',
                                      8 : 'sounds-obey.mp3',
                                      9 : 'sounds-pedantic.mp3',
                                      10 : 'sounds-served.mp3',
                                      11 : 'sounds-surprise-on-a-spring.mp3',
                                      12 : 'sounds-worthwhile.mp3',
                                      13 : 'sounds-you-know.mp3',
                                      14 : 'sounds-your-turn.mp3',
                                        } %}
                    {% for sound in sounds %}
                        <audio controls id="{{sound}}">
                            <source src="{{asset('bundles/chat/sounds/'~sound)}}" type="audio/mpeg">
                        </audio>
                    {% endfor %}
                </div>
            </div>

            {% if local is defined and local == false %}
                <span class="col-xs-12" id="container-notification"></span>
            {% endif %}
            <div class="col-xs-12" id="container-server-start" style="display: none;">
                <p>{{'admin_settings.server_offline_message'|trans}}</p>
                <a class="btn btn-success btn-md start-gos-server">{{'admin_settings.start_server_message'|trans}}</a>
            </div>

            <div class="chat-group" id="group-2">
                <strong>{{'admin.clients'|trans}}</strong>
                {% for conversation in lastConversations %}
                    <a href="#" class="open-client-conversation" client-id="{{conversation.senderId}}" online-with="" data-conversation-history="#client-{{conversation.senderId}}">
                        <span class="user-status is-offline"></span> 
                        <em>{{conversation.senderNickname}}</em> 
                        <span class="online-with hidden"></span>
                    <button class="hidden pull-right steal-chat" client-id="{{conversation.senderId}}" title="{{'admin.steal_conversation'|trans}}"><i class="entypo-eye"></i></button>
                    <span class="typing hidden pull-right"><i>{{'global.typing'|trans}}</i></span>
                    </a>
                {% else %}
                    <a class="disabled" href="return false;">{{'admin.no_chat_history'|trans}}</a>
                {% endfor %}
            </div>
        </div>

        <!-- conversation template -->
        <div class="chat-conversation">
            <div class="conversation-header">
                <a href="#" class="conversation-close"><i class="entypo-cancel"></i></a>

                <span class="user-status"></span>
                <span class="display-name"></span> 
                <small></small>
            </div>

            <ul class="conversation-body">	
            </ul>

            <div class="chat-textarea">
                <textarea class="form-control autogrow" placeholder="{{'global.type_your_message'|trans}}"></textarea>
            </div>
            <div class="col-xs-12 margin-bottom flt-left {% if not chatSettings.enableCustomResponses %} hidden {% endif %}" id="container-custom-messages-to-send">
                {% include 'ChatBundle:ChatSettings:customMessagesToSend.html.twig' %}
            </div>
        </div>
    </div>

    <!-- Chat Histories -->
    <div class="container-chats">
        {% set lastDate = '' %}
        {% set lastHour = '' %}
        {% for clientConversation in allConversations %}
            <ul class="chat-history" id="client-{{clientConversation.data.senderId}}">
                {% for message in clientConversation.messages %}
                    {% set userClass = 'opponent' %}
                    {% if message.senderId == userId %}
                        {% set userClass = 'user' %}
                    {% endif %}
                    {% set readClass = '' %}
                    {% if message.readed == false and message.type == constant('Kijho\\ChatBundle\\Entity\\Message::TYPE_CLIENT_TO_ADMIN') %}
                        {% set readClass = 'unread' %}
                    {% endif %}
                    <li class="{{userClass~' '~readClass}}">
                        {#<span class="user">{{message.senderNickname}}</span>#}
                        <p>{{message.message}}</p>
                        <span class="time">
                            {% if message.date|date('d/m/Y') != lastDate %}
                                {% set lastDate = message.date|date('d/m/Y') %}
                                {{ lastDate }}
                            {% endif %}
                            {% if message.date|date('h:i a') != lastHour %}
                                {% set lastHour = message.date|date('h:i a') %}
                                {{ lastHour }}
                            {% endif %}
                        </span>
                    </li>
                {% endfor %}
            </ul>
        {% endfor %}
    </div>

{% endblock %}

{% block scripts %}
        {# Damos click en este boton para desplegar el panel #}
        $(".display-chat").trigger('click');

        {# Ejecutamos una funcion periodicamente para verificar el estado del servidor #}
        window.setInterval(verifyServerConnection, 4000);

        $(".start-gos-server").click(function () {
            $(this).html("{{'global.please_wait'|trans}}");
            $(this).attr('disabled','disabled');
            $.ajax({
                type: 'POST',
                url: "{{path('chat_start_gos_server')}}",
                dataType: 'json',
                timeout: 5000,
                success: function (r)
                {
                    window.setTimeout(function(){
                        $(this).removeAttr('disabled');
                        window.location.reload();
                    }, 3000);
                },
                error: function (r)
                {
                    $(this).removeAttr('disabled');
                    window.location.reload();
                }
            });
        });
        
        $( "#container-custom-messages" ).on( "click", ".remove-custom-message", function( event ) {
            removeCustomMessage($(this));
        });
        
        
        $( "#group-2" ).on( "click", ".steal-chat", function( event ) {
            stealConversation($(this));
        });
    {% endblock %}

    {% block other_scripts %}
        {{ ws_client() }}

        <script type = "text/javascript" >
                var _WS_URI = "ws://{{ gos_web_socket_server_host }}:{{ gos_web_socket_server_port }}";

        var webSocket = WS.connect(_WS_URI);

        var successConnect = false;

        var globalSession = null;

        webSocket.on("socket/connect", function (session) {
            bindUI(session);
            console.log("Successfully Connected!");
            successConnect = true;
            updateConnectionData(session)
            joinChatRoom(session);
        });

        webSocket.on("socket/disconnect", function (error) {
            console.log("Disconnected for " + error.reason + " with code " + error.code);
            successConnect = false;
            unbindUI();
        });

        /*Permite cambiar el nickname del usuario*/
        function updateConnectionData(session)
        {
            session.call("rpc/update_connection_data", {"nickname": "{{nickname}}", "user_id": "{{userId}}", "user_type": "{{userType}}"}).then(
                    function (result) {
                        console.log("RPC Valid!", result);
                    },
                    function (error, desc) {
                        console.log("RPC Error", error, desc);
                    }
            );
        }

        var messageToClient = '';
        // Permite habilitar los eventos sobre los botones de la ventana, cuando hay conexion
        function bindUI(session) {
            globalSession = session;
            $(".chat-textarea textarea").bind("keyup", function (e) {
                var key;
                if (window.event) {
                    key = window.event.keyCode;   /*IE*/
                } else {
                    key = e.which;                /*firefox*/
                }
                if ($('.chat-textarea textarea').val() != '') {
                    messageToClient = $('.chat-textarea textarea').val();
                }
                if (key == 13) {
                    sendMessage(session);
                } else {
                    notifyTyping(session);
                }
            });

            $(".chat-inner").on("click", ".open-client-conversation", function () {
                var clientId = $(this).attr('client-id');
                prepareToMessage(clientId);
                putMessagesReaded(session, clientId);
            });
            
            $(".display-settings").bind("click", function(e) {
                $(".chat-settings").toggleClass('hidden');
            });
            
            $("#chatbundle_user_chat_settings_type_notificationSound").bind("change", function(e) {
                document.getElementById($(this).val()).play();
            });
            
            $(".play-sound").bind("click", function(e) {
                var sound = $("#chatbundle_user_chat_settings_type_notificationSound").val();
                document.getElementById(sound).play();
            });
            
            $(".save-settings").bind("click", function(e) {
                saveSettings(session);
            });
            
            $(".change-status").bind("click", function(e) {
                var newStatus = $(this).attr('status');
                changeStatus(session, newStatus);
            });
            
            $(".add-custom-message").bind("click", function(e) {
                addCustomMessage();
            });
            
            $(".send-custom-message").bind("click", function(e) {
                sendCustomMessage();
            });
            
            $(".show-custom-messages").bind("click", function(e) {
                $("#container-custom-messages-to-send div.messages").removeClass('hidden');
                $(".hide-custom-messages").removeClass('hidden');
                $(".send-custom-message").removeClass('hidden');
                $(this).addClass('hidden');
            });
            
            $(".hide-custom-messages").bind("click", function(e) {
                $("#container-custom-messages-to-send div.messages").addClass('hidden');
                $(".show-custom-messages").removeClass('hidden');
                $(".send-custom-message").addClass('hidden');
                $(this).addClass('hidden');
            });
            
            $("#chatbundle_chat_settings_type_enableCustomResponses").bind("change", function(e) {
                var object = $(this);
                if ( object.is(':checked') ) {
                    $("#container-custom-messages").removeClass('hidden');
                    $(".add-custom-message").removeClass('hidden');
                } else {
                    $("#container-custom-messages").addClass('hidden');
                    $(".add-custom-message").addClass('hidden');
                }
            });
        }



        // Permite deshabilitar los eventos sobre los botones, cuando se pierde la conexion
        function unbindUI() {
            globalSession = null;
            $(".chat-textarea textarea").unbind();
            $(".open-client-conversation").unbind();
            $(".display-settings").unbind();
            $("#chatbundle_user_chat_settings_type_notificationSound").unbind();
            $(".play-sound").unbind();
            $(".save-settings").unbind();
            $(".change-status").unbind();
            $(".add-custom-message").unbind();
            $(".remove-custom-message").unbind();
            $(".send-custom-message").unbind();
            $(".show-custom-messages").unbind();
            $(".hide-custom-messages").unbind();
            $("#chatbundle_chat_settings_type_enableCustomResponses").unbind();
        }

        //permite realizar la conexion a una sala en especifico, y establecer un escucha de eventos
        function joinChatRoom(session) {
            //the callback function in "subscribe" is called everytime an event is published in that channel.
            session.subscribe("{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CHAT_CHANNEL')}}", serverEvent);
        }

        /**
         * Esta funcion permite setear el id del cliente en el texarea 
         * para enviar mensajes, cuando el usuario abre una ventana de chat
         * @param {string} clientId identficador del cliente
         **/
        function prepareToMessage(clientId) {
            $(".chat-textarea textarea").attr('destination-id', clientId);
        }

        /**
         * Permite enviar un mensaje a alguno de los clientes
         * @param {type} session
         * @returns {undefined}
         */
        function sendMessage(session) {
            var textarea = $('.chat-textarea textarea');
            var clientId = textarea.attr('destination-id') + "";

            if (clientId != '' && clientId != 'undefined' && messageToClient != '') {
                
                var data = {type: "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGE_TO_CLIENT')}}",
                    clientId: clientId,
                    message: messageToClient,
                };
                session.publish("{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CHAT_CHANNEL')}}", data);
                messageToClient = '';
            }
        }

        /**
         * Es la funcion que escucha los eventos del servidor 
         * @param {type} uri
         * @param {type} payload
         * @returns {undefined}
         */
        function serverEvent(uri, payload) {

            if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::SERVER_WELCOME_MESSAGE')}}") {
                displayNotification(payload.msg);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGE_FROM_CLIENT')}}") {
                messageFromClient(payload);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::SERVER_ONLINE_USERS')}}") {
                refreshOnlineUsers(payload.online_users);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::SERVER_NEW_CLIENT_CONNECTION')}}") {
                clientJoinRoom(payload);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::SERVER_CLIENT_LEFT_ROOM')}}") {
                clientLeftRoom(payload);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGE_SEND_SUCCESSFULLY')}}") {
                displayNotification('Message send successfully');
                $(".chat-conversation i.waiting-response").remove();
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CLIENT_TYPING')}}") {
                clientTyping(payload);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::SETTINGS_UPDATED')}}") {
                settingsUpdated(payload);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::SELF_STATUS_UPDATED')}}") {
                selfStatusUpdated(payload);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CLIENT_STATUS_UPDATED')}}") {
                clientStatusUpdated(payload);
            } else if (payload.msg_type == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGES_FROM_OTHER_CONVERSATION')}}") {
                messagesFromOtherConversation(payload);
            }
        }

        /**
         * Permite pintar el listado de usuarios conectados
         * @param {string} onlineUsers
         **/
        function refreshOnlineUsers(onlineUsers) {
            
            //verificamos si los online estan en el listado de conversaciones para ponerlos online (verde)
            for (i = 0; i < onlineUsers.length; i++) {
                var element = $("#group-2 a[client-id='" + onlineUsers[i]['user_id'] + "']");
                
                if (!$.isEmptyObject(element.html())) {
                    element.attr('online-with', onlineUsers[i]['onlineWithAdmin']);
                    
                    var stealElement = $("#group-2 button.steal-chat[client-id='" + onlineUsers[i]['user_id'] + "']");
                    var onlineWithElement = element.find('span.online-with');
                    
                    if (onlineUsers[i]['onlineWithAdmin'] != '' 
                        && onlineUsers[i]['onlineWithAdmin'] != "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGE_ALL_ADMINISTRATORS')}}"
                            && onlineUsers[i]['onlineWithAdmin'] != "{{nickname}}") {
                            onlineWithElement.removeClass('hidden');
                            onlineWithElement.html('('+onlineUsers[i]['onlineWithAdmin']+')');
                            onlineWithElement.attr('title', "{{'global.online_with'|trans}}"+onlineUsers[i]['onlineWithAdmin']);
                            stealElement.removeClass('hidden');
                    } else {
                        stealElement.addClass('hidden');
                        onlineWithElement.addClass('hidden');
                    }
                    
                    var spanStatus = $("#group-2 a[client-id='" + onlineUsers[i]['user_id'] + "'] span").first();
                    spanStatus.attr('class', 'user-status '+ onlineUsers[i]['status']);
                } else {
                    clientJoinRoom(onlineUsers[i]);
                }
            }
            neonChat.orderGroups();
        }

        /**
         * Permite realizar acciones en pantalla cuando un cliente
         * sale del chat 
         * @param {type} payload
         **/
        function clientLeftRoom(payload) {
            var element = $("#group-2 a[client-id='" + payload.user_id + "']");
            if (!$.isEmptyObject(element.html())) {
                var spanStatus = $("#group-2 a[client-id='" + payload.user_id + "'] span").first();
                spanStatus.attr('class', 'user-status is-offline');
            }
            neonChat.refreshUserIds();
            neonChat.orderGroups();
            displayNotification(payload.msg);
        }

        /**
         * Permite realizar acciones en pantalla cuando un cliente
         * se conecta al chat
         * @param {type} payload
         **/
        function clientJoinRoom(payload) {
            
            var element = $("#group-2 a[client-id='" + payload.user_id + "']");
            if (!$.isEmptyObject(element.html())) {
                var spanStatus = $("#group-2 a[client-id='" + payload.user_id + "'] span").first();
                spanStatus.attr("class", "user-status "+payload.status);
            } else {
                var htmlUser = '<a href="#" class="open-client-conversation" client-id="' + payload.user_id + '" online-with="" data-conversation-history="#client-' + payload.user_id + '"><span class="user-status '+payload.status+'"></span> <em>' + payload.nickname + '</em>'; 
                htmlUser += '<span class="badge badge-info is-hidden">0</span> ';
                htmlUser += '<span class="online-with hidden"></span>';
                htmlUser += '<button class="hidden pull-right steal-chat" client-id="' + payload.user_id + '" title="{{'admin.steal_conversation'|trans}}"><i class="entypo-eye"></i></button></a>';
                htmlUser += '<span class="typing hidden pull-right"><i>{{'global.typing'|trans}}</i></span>';
                var firstUser = $('#group-2 a').first();
                if (firstUser.hasClass('disabled')) {
                    firstUser.remove();
                    $('#group-2').append(htmlUser);
                } else {
                    $('#group-2 a').first().before(htmlUser);
                }
            }
            neonChat.refreshUserIds();
            neonChat.orderGroups();
            if (payload.msg) {
                displayNotification(payload.msg);
            }
        }

        /**
         * Permite verificar el estado del servidor gos para ocultar o mostrar 
         * el boton de inicio manual del servidor
         */
        function verifyServerConnection() {
            if (successConnect) {
                $('#container-server-start').css('display', 'none');
            } else {
                $('#container-server-start').css('display', '');
            }
        }

        /**
         * Permite marcar los mensajes de un cliente como leidos
         * @param {string} clientId identificador del cliente
         **/
        function putMessagesReaded(session, clientId) {
            if (clientId != '') {
                var data = {type: "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::PUT_MESSAGES_AS_READED')}}",
                    clientId: clientId,
                };
                session.publish("{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CHAT_CHANNEL')}}", data);

                var chatContainer = $("#client-" + clientId);
                chatContainer.find('li.unread').removeClass('unread');
            }
        }

        /**
         * Permite realizar acciones en pantalla cuando llega un mensaje de un cliente
         * @param {type} payload
         **/
        function messageFromClient(payload) {
            
            displayNotification("{{'admin.new_message_from'|trans}}" + payload.nickname);

            $(".play-sound").trigger('click');

            //buscamos el tab de conversacion del usuario en el listado de conversaciones
            var element = $(".open-client-conversation[client-id='" + payload.user_id + "']");
            if (!$.isEmptyObject(element.html())) {
                increaseUnreadCounters(element);

                //armamos el html con el mensaje del usuario
                var htmlMessage = '<li class="opponent unread">';

                if (payload.admin_destination == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGE_ALL_ADMINISTRATORS')}}") {
                    htmlMessage += '<span class="user pull-left">' + payload.nickname + ' <i class="pull-right waiting-response">({{'admin.waiting_admin_response'|trans}})</i></span>';
                } else {
                    //htmlMessage += '<span class="user">' + payload.nickname + '</span>';
                }
                htmlMessage += '<p>' + payload.msg + '</p>'
                        + '<span class="time">' + payload.msg_date + '</span>'
                        + '</li>';

                //buscamos el panel de mensajes del usuario
                var chatContainer = $("#client-" + payload.user_id);
                if (!$.isEmptyObject(chatContainer.html())) {
                    chatContainer.append(htmlMessage);
                    //chatContainer.html(htmlMessage);
                } else {
                    //si no habia un panel de mensajes para el usuario, le creamos uno
                    var html = '<ul class="chat-history" id="client-' + payload.user_id + '">'
                            + htmlMessage + '</ul>';
                    $(".container-chats").append(html);
                }

                neonChat.prefetchMessages();

                //verificamos si la ventana de chat esta abierta
                var display = $('.chat-conversation').css('display');
                if (display == 'block') {
                    //si esta abierta preguntamos si el mensaje entrante es del chat abierto
                    var userId = $(".chat-conversation div.chat-textarea textarea.form-control").attr('destination-id');
                    if (userId == payload.user_id) {
                        //debemos marcar los mensajes como leidos
                        if (globalSession) {
                            //ocultar el icono de unread
                            putMessagesReaded(globalSession, payload.user_id);
                            neonChat.prefetchMessages();

                            neonChat.resetUnreads(element.attr('id'));
                            neonChat.puffUnreadsAll();

                        }
                    }
                }
                
                if (typeof $current_user != 'undefined') {
                    neonChat.renderMessages(neonChat.$current_user.attr('id'));
                }
                
                //validamos si otro administrador ya atendio al cliente, para quitar la alerta
                if (payload.admin_destination != "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGE_ALL_ADMINISTRATORS')}}" 
                        && "{{userId}}" != payload.admin_destination) {
                    $(".chat-conversation i.waiting-response").remove();
                }

            }

        }

        /**
         * Permite incrementar los contadores de mensajes no leidos
         * cuando un cliente envia un nuevo mensaje
         * @param {type} element
         **/
        function increaseUnreadCounters(element) {
            //buscamos el span para aumentar los mensajes sin leer del usuario
            var span = element.find("span.badge");
            var unreadMessages = parseInt(span.text());
            if (unreadMessages == 0) {
                span.removeClass('is-hidden');
            }
            span.text(unreadMessages + 1);

            //buscamos el span para aumentar los mensajes sin leer de todos los usuarios
            var generalSpan = $(".chat-header span.badge");
            var unreadMessages = parseInt(generalSpan.text());
            if (unreadMessages == 0) {
                generalSpan.removeClass('is-hidden');
            }
            generalSpan.text(unreadMessages + 1);
        }


        /**
         * Permite desplegar el mensaje que indica que un cliente esta escribiendo
         **/
        function clientTyping(payload) {
            if (payload.online_with == "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::MESSAGE_ALL_ADMINISTRATORS')}}"
                    || payload.online_with == "{{nickname}}") {
                
                var tabConversation = $(".open-client-conversation[client-id='" + payload.user_id + "']");
                tabConversation.find("span.typing").removeClass('hidden');
                window.setTimeout(hideTyping, 2000);
            } 
            
        }

        /**
         * Permite desplegar un mensaje en el panel de notificaciones
         **/
        function displayNotification(msg) {
            $("#container-notification").html(msg);
            $("#container-notification").removeClass('hidden');
            window.setTimeout(hideNotification, 2000);
        }

        /**
         * Permite ocultar el panel de notificaciones
         **/
        function hideNotification() {
            var object = $("#container-notification");
            if (!object.hasClass('hidden')) {
                object.addClass('hidden');
            }
        }

        /**
         * Permite ocultar el mensaje que indica que un cliente esta escribiendo
         **/
        function hideTyping() {
            $(".open-client-conversation span.typing").each(function () {
                var object = $(this);
                if (!object.hasClass('hidden')) {
                    object.addClass('hidden');
                }
            });
        }

        /**
         * Permite enviar las nuevas configuraciones del chat al servidor 
         * para que sean validadas y almacenadas
         **/
        function saveSettings(session) {
            
            var customMessages = [];
            $("#container-custom-messages textarea").each(function() {
                customMessages.push($(this).val());
            });
            
            var enableCustomMessages = false;
            
            if ( $("#chatbundle_chat_settings_type_enableCustomResponses").is(':checked') ) {
                enableCustomMessages = true;
            }
            
            var data = {type: "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::UPDATE_SETTINGS')}}",
                notificationSound: $("#chatbundle_user_chat_settings_type_notificationSound").val(),
                emailOfflineMessages: $("#chatbundle_chat_settings_type_emailOfflineMessages").val(),
                automaticWelcomeMessage: $("#chatbundle_chat_settings_type_automaticMessage").val(),
                enableCustomMessages: enableCustomMessages,
                customMessages: customMessages,
            };
            session.publish("{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CHAT_CHANNEL')}}", data);
            
            $(".save-settings").html("{{'global.please_wait'|trans}}");
            $(".save-settings").attr('disabled','disabled');
        }
        
        /**
         * Permite realizar cambios en pantalla una vez almacenadas las 
         * configuraciones del chat
         **/
        function settingsUpdated(payload) {
            $(".save-settings").html("{{'global.save_changes'|trans}}");
            $(".save-settings").removeAttr('disabled');
            $(".chat-settings").toggleClass('hidden');
            $("#container-custom-messages-to-send div.messages").html(payload.html_custom_messages);
            
            if (payload.enableCustomMessages) {
                $("#container-custom-messages-to-send").removeClass('hidden');
            } else {
                $("#container-custom-messages-to-send").addClass('hidden');
            }
        }
        
        /**
         * Permite solicitar al servidor el cambio de estado del usuario
         */
        function changeStatus(session, newStatus) {
            var data = {type: "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CHANGE_ADMIN_STATUS')}}",
                newStatus: newStatus,
            };
            session.publish("{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CHAT_CHANNEL')}}", data);
        }
        
        /**
         * Permite modificar visualmente el cambio de estado realizado por el admin
         */
        function selfStatusUpdated(payload) {
            $(".chat-header span.main-status").removeClass(payload.previous_status);
            $(".chat-header span.main-status").addClass(payload.new_status);
        }
        
        /**
         * Permite actualizar en pantalla en nuevo estado de un cliente
         */
        function clientStatusUpdated(payload) {
            var tabConversation = $(".open-client-conversation[client-id='" + payload.user_id + "']");
            tabConversation.find("span.user-status").removeClass(payload.previous_status);
            tabConversation.find("span.user-status").addClass(payload.new_status);
        }

        /**
         * Permite duplicar el html para poder ingresar una nueva frase
         */
        function addCustomMessage() {
            var numberChilds = $("#container-custom-messages div.custom-message").length;
            $("#container-custom-messages div.custom-message:last").clone().appendTo("#container-custom-messages");
            var newChild = $("#container-custom-messages div.custom-message:last");
            newChild.find('label:first').html(parseInt(numberChilds + 1) + '.');
            newChild.find('textarea').val('');
            newChild.find('textarea').focus();
        }
        
        /**
         * Permite eliminar el html correspondiente a una frase en especifico
         */
        function removeCustomMessage(object) {
            
            var numberChilds = $("#container-custom-messages div.custom-message").length;
            
            if (numberChilds > 1) {
                object.parent().remove();
                var index = 1;
                $("#container-custom-messages div.custom-message").each(function() {
                    $(this).find('label:first').html(index);
                    index++;
                });
            }
        }
        
        /**
         * Permite enviar mensajes predefinidos a los clientes
         * @returns {undefined}
         */
        function sendCustomMessage() {
            $(".custom-message-to-send input").each( function () {
                var input = $(this);
                if ( input.is(':checked') ) {
                    messageToClient = $(".custom-message-to-send label[for='"+input.attr('id')+"']").html();
                    if (messageToClient != '') {
                        $(".chat-textarea textarea").val(messageToClient);
                        sendMessage(globalSession);
                        var e = jQuery.Event("keydown");
                        e.which = 13;
                        e.keyCode = 13;
                        $(".chat-textarea textarea").trigger(e);
                        $(".hide-custom-messages").trigger('click');
                    }
                }
            });
        }
        
        /**
         * Permite notificarle al cliente que el administrador le esta escribiendo un mensaje
         */
        function notifyTyping(session) {
            var textarea = $('.chat-textarea textarea');
            var clientId = textarea.attr('destination-id') + "";

            if (clientId != '' && clientId != 'undefined') {
                
                var data = {type: "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::ADMIN_TYPING')}}",
                    clientId: clientId,
                };
                session.publish("{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CHAT_CHANNEL')}}", data);
            }
        }
        
        /**
         * Esta funcion permite solicitar al servidor el robo de una conversacion
         * de un cliente, el cual estaba hablando con otro administrador
         **/
        function stealConversation(object) {
            var clientId = object.attr('client-id');
            
            if (clientId != '' && clientId != 'undefined') {
                var data = {type: "{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::STEAL_CONVERSATION_WITH_CLIENT')}}",
                    clientId: clientId,
                };
                globalSession.publish("{{constant('Kijho\\ChatBundle\\Topic\\ChatTopic::CHAT_CHANNEL')}}", data);
            }
        }
        
        function messagesFromOtherConversation(payload) {
            displayNotification("{{'admin.stealed_conversation'|trans}}");

            //buscamos el tab de conversacion del usuario en el listado de conversaciones
            var element = $(".open-client-conversation[client-id='" + payload.client_id + "']");
            
            var messages = payload.messages;
            var userIdentifier = payload.client_id;
            
            if (!$.isEmptyObject(element.html())) {
                
                for (var i = 0; i < messages.length; i++) {
                    increaseUnreadCounters(element);
                    
                    //armamos el html con el mensaje del usuario
                    if (messages[i].type == "{{constant('Kijho\\ChatBundle\\Entity\\Message::TYPE_CLIENT_TO_ADMIN')}}") {
                        var htmlMessage = '<li class="opponent unread">';
                    } else if (messages[i].type == "{{constant('Kijho\\ChatBundle\\Entity\\Message::TYPE_ADMIN_TO_CLIENT')}}") {
                        var htmlMessage = '<li class="user unread">';
                    }
                    
                    htmlMessage += '<span class="user">' + messages[i].sender_nickname + '</span>';

                    htmlMessage += '<p>' + messages[i].message + '</p>'
                            + '<span class="time">' + messages[i].hour + '</span>'
                            + '</li>';

                    //buscamos el panel de mensajes del usuario
                    var chatContainer = $("#client-" + userIdentifier);

                    if (!$.isEmptyObject(chatContainer.html())) {
                        chatContainer.append(htmlMessage);
                    } else {
                        //si no habia un panel de mensajes para el usuario, le creamos uno
                        var html = '<ul class="chat-history" id="client-' + userIdentifier + '">'
                                + htmlMessage + '</ul>';
                        $(".container-chats").append(html);
                    }      
                }
                
                neonChat.prefetchMessages();

                //verificamos si la ventana de chat esta abierta
                var display = $('.chat-conversation').css('display');

                if (display == 'block') {
                    //si esta abierta preguntamos si el mensaje entrante es del chat abierto
                    var userId = $(".chat-conversation div.chat-textarea textarea.form-control").attr('destination-id');
                    if (userId == userIdentifier) {
                        //debemos marcar los mensajes como leidos
                        if (globalSession) {

                            neonChat.resetUnreads(element.attr('id'));
                            neonChat.puffUnreadsAll();
                        }
                        neonChat.renderMessages(neonChat.$current_user.attr('id'));
                    }
                }
            }
        }

    </script>
{% endblock %}